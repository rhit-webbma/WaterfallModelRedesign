/* File generated by: simse.codegenerator.logicgenerator.dialoggenerator.ChooseRoleToPlayDialogGenerator */
package simse.logic.dialogs;

import simse.state.*;
import simse.logic.*;
import simse.adts.objects.*;
import simse.adts.actions.*;
import java.util.*;

import javafx.collections.FXCollections;
import javafx.event.EventHandler;
import javafx.geometry.Point2D;
import javafx.scene.control.Button;
import javafx.scene.control.ComboBox;
import javafx.scene.control.Dialog;
import javafx.scene.control.Label;
import javafx.scene.input.MouseEvent;
import javafx.scene.layout.Pane;
import javafx.scene.layout.VBox;
import javafx.stage.Stage;

public class ChooseRoleToPlayDialog extends Dialog implements EventHandler<MouseEvent> {
	private Stage gui;
	private Employee emp;
	private simse.adts.actions.Action action;
	private String menuText;
	private RuleExecutor ruleExec;
	private ComboBox partNameList;
	private Button okButton;
	private Button cancelButton;

	public ChooseRoleToPlayDialog(Stage owner, Vector<String> partNames,
			Employee e, simse.adts.actions.Action act, String menText,
			RuleExecutor re) {
		gui = owner;
		emp = e;
		action = act;
		menuText = menText;
		ruleExec = re;
		setTitle("Choose Action Role");
		VBox mainPane = new VBox();
		Pane topPane = new Pane();
		topPane.getChildren().add(new Label("Choose role to play:"));
		Pane middlePane = new Pane();
		partNameList = new ComboBox(FXCollections.observableList(partNames));
		middlePane.getChildren().add(partNameList);
		Pane bottomPane = new Pane();
		okButton = new Button("OK");
		okButton.addEventHandler(MouseEvent.MOUSE_CLICKED, this);
		bottomPane.getChildren().add(okButton);
		cancelButton = new Button("Cancel");
		cancelButton.addEventHandler(MouseEvent.MOUSE_CLICKED, this);
		bottomPane.getChildren().add(cancelButton);
		mainPane.getChildren().addAll(topPane, middlePane, bottomPane);
//		setContentPane(mainPane);
//		validate();
//		pack();
//		repaint();
//		toFront();
		Point2D ownerLoc = new Point2D(owner.getX(), owner.getY());
		Point2D thisLoc = new Point2D((ownerLoc.getX() + (owner.getWidth() / 2) - (this.getWidth() / 2)),
				(ownerLoc.getY() + (owner.getHeight() / 2) - (this.getHeight() / 2)));
		this.setX(thisLoc.getX());
		this.setY(thisLoc.getY());
		if (partNames.size() == 1) {
			onlyOneRole();
		} else {
			show();
		}
	}

	@Override
	public void handle(MouseEvent evt) {
		Object source = evt.getSource();
		if (source == cancelButton) {
			close();
		} else if (source == okButton) {
			String partName = (String) (partNameList.getSelectionModel().getSelectedItem());
			if (action instanceof CreateRequirementsAction) {
				if (menuText.equals("Create Requirements Document")) {
					emp.setOverheadText("I'm creating the requirements document now");
				}
				if (partName.equals("Emp")) {
					((CreateRequirementsAction) action).addEmp(emp);
				}
			}
			if (action instanceof ReviewRequirementsAction) {
				if (menuText.equals("Review requirements document")) {
					emp.setOverheadText("I'm reviewing the requirements document now, to try to find any errors");
				}
				if (partName.equals("Emp")) {
					((ReviewRequirementsAction) action).addEmp(emp);
				}
			}
			if (action instanceof CorrectRequirementsAction) {
				if (menuText.equals("Correct the requirements document")) {
					emp.setOverheadText("I'm correcting the requirements document now");
				}
				if (partName.equals("Emp")) {
					((CorrectRequirementsAction) action).addEmp(emp);
				}
			}
			if (action instanceof CreateDesignAction) {
				if (menuText.equals("Create the design document")) {
					emp.setOverheadText("I'm creating the design document now");
				}
				if (partName.equals("Emp")) {
					((CreateDesignAction) action).addEmp(emp);
				}
			}
			if (action instanceof ReviewDesignAction) {
				if (menuText.equals("Review the design document")) {
					emp.setOverheadText("I'm reviewing the design document now, to try to find any errors");
				}
				if (partName.equals("Emp")) {
					((ReviewDesignAction) action).addEmp(emp);
				}
			}
			if (action instanceof CorrectDesignAction) {
				if (menuText.equals("Correct the design document")) {
					emp.setOverheadText("I'm correcting the design document now");
				}
				if (partName.equals("Emp")) {
					((CorrectDesignAction) action).addEmp(emp);
				}
			}
			if (action instanceof CreateCodeAction) {
				if (menuText.equals("Create code")) {
					emp.setOverheadText("I'm coding now");
				}
				if (partName.equals("Emp")) {
					((CreateCodeAction) action).addEmp(emp);
				}
			}
			if (action instanceof InspectCodeAction) {
				if (menuText.equals("Inspect the code")) {
					emp.setOverheadText("I'm inspecting the code now, to try to find any errors");
				}
				if (partName.equals("Emp")) {
					((InspectCodeAction) action).addEmp(emp);
				}
			}
			if (action instanceof CorrectCodeAction) {
				if (menuText.equals("Correct code")) {
					emp.setOverheadText("I'm correcting code now");
				}
				if (partName.equals("Emp")) {
					((CorrectCodeAction) action).addEmp(emp);
				}
			}
			if (action instanceof IntegrateCodeAction) {
				if (menuText.equals("Integrate code")) {
					emp.setOverheadText("I'm integrating code now");
				}
				if (partName.equals("Emp")) {
					((IntegrateCodeAction) action).addEmp(emp);
				}
			}
			if (action instanceof SystemTestAction) {
				if (menuText.equals("Do system test")) {
					emp.setOverheadText("I'm doing the system test now");
				}
				if (partName.equals("Emp")) {
					((SystemTestAction) action).addEmp(emp);
				}
			}
			if (action instanceof CreateSystemTestPlanAction) {
				if (menuText.equals("Create the system test plan")) {
					emp.setOverheadText("I'm creating the system test plan now");
				}
				if (partName.equals("Emp")) {
					((CreateSystemTestPlanAction) action).addEmp(emp);
				}
			}
			if (action instanceof ReviewSystemTestPlanAction) {
				if (menuText.equals("Review the system test plan")) {
					emp.setOverheadText("I'm reviewing the system test plan now, to try to find any errors");
				}
				if (partName.equals("Emp")) {
					((ReviewSystemTestPlanAction) action).addEmp(emp);
				}
			}
			if (action instanceof CorrectSystemTestPlanAction) {
				if (menuText.equals("Correct the system test plan")) {
					emp.setOverheadText("I'm correcting the system test plan now");
				}
				if (partName.equals("Emp")) {
					((CorrectSystemTestPlanAction) action).addEmp(emp);
				}
			}
			if (action instanceof DeliverProductAction) {
				if (partName.equals("Emp")) {
					((DeliverProductAction) action).addEmp(emp);
				}
			}
			if (action instanceof ChangePayRateAction) {
				if (partName.equals("Emp")) {
					((ChangePayRateAction) action).addEmp(emp);
				}
			}
			if (action instanceof GiveBonusAction) {
				if (partName.equals("Emp")) {
					((GiveBonusAction) action).addEmp(emp);
				}
			}
			if (action instanceof FireAction) {
				if (menuText.equals("Fire")) {
					emp.setOverheadText("I'm fired?! Waaahhh!");
				}
				if (partName.equals("FiredPerson")) {
					((FireAction) action).addFiredPerson(emp);
				}
			}
			if (action instanceof PurchaseToolAction) {
				if (menuText.equals("Purchase tool(s)")) {
					emp.setOverheadText("Tool(s) have been purchased!");
				}
				if (partName.equals("EmpWhoseMenuClickedOn")) {
					((PurchaseToolAction) action).addEmpWhoseMenuClickedOn(emp);
				}
			}
			close();
		}
	}

	private void onlyOneRole() {
		String partName = (String) (partNameList.getItems().get(0));
		if (action instanceof CreateRequirementsAction) {
			if (menuText.equals("Create Requirements Document")) {
				emp.setOverheadText("I'm creating the requirements document now");
			}
			if (partName.equals("Emp")) {
				((CreateRequirementsAction) action).addEmp(emp);
			}
		} else if (action instanceof ReviewRequirementsAction) {
			if (menuText.equals("Review requirements document")) {
				emp.setOverheadText("I'm reviewing the requirements document now, to try to find any errors");
			}
			if (partName.equals("Emp")) {
				((ReviewRequirementsAction) action).addEmp(emp);
			}
		} else if (action instanceof CorrectRequirementsAction) {
			if (menuText.equals("Correct the requirements document")) {
				emp.setOverheadText("I'm correcting the requirements document now");
			}
			if (partName.equals("Emp")) {
				((CorrectRequirementsAction) action).addEmp(emp);
			}
		} else if (action instanceof CreateDesignAction) {
			if (menuText.equals("Create the design document")) {
				emp.setOverheadText("I'm creating the design document now");
			}
			if (partName.equals("Emp")) {
				((CreateDesignAction) action).addEmp(emp);
			}
		} else if (action instanceof ReviewDesignAction) {
			if (menuText.equals("Review the design document")) {
				emp.setOverheadText("I'm reviewing the design document now, to try to find any errors");
			}
			if (partName.equals("Emp")) {
				((ReviewDesignAction) action).addEmp(emp);
			}
		} else if (action instanceof CorrectDesignAction) {
			if (menuText.equals("Correct the design document")) {
				emp.setOverheadText("I'm correcting the design document now");
			}
			if (partName.equals("Emp")) {
				((CorrectDesignAction) action).addEmp(emp);
			}
		} else if (action instanceof CreateCodeAction) {
			if (menuText.equals("Create code")) {
				emp.setOverheadText("I'm coding now");
			}
			if (partName.equals("Emp")) {
				((CreateCodeAction) action).addEmp(emp);
			}
		} else if (action instanceof InspectCodeAction) {
			if (menuText.equals("Inspect the code")) {
				emp.setOverheadText("I'm inspecting the code now, to try to find any errors");
			}
			if (partName.equals("Emp")) {
				((InspectCodeAction) action).addEmp(emp);
			}
		} else if (action instanceof CorrectCodeAction) {
			if (menuText.equals("Correct code")) {
				emp.setOverheadText("I'm correcting code now");
			}
			if (partName.equals("Emp")) {
				((CorrectCodeAction) action).addEmp(emp);
			}
		} else if (action instanceof IntegrateCodeAction) {
			if (menuText.equals("Integrate code")) {
				emp.setOverheadText("I'm integrating code now");
			}
			if (partName.equals("Emp")) {
				((IntegrateCodeAction) action).addEmp(emp);
			}
		} else if (action instanceof SystemTestAction) {
			if (menuText.equals("Do system test")) {
				emp.setOverheadText("I'm doing the system test now");
			}
			if (partName.equals("Emp")) {
				((SystemTestAction) action).addEmp(emp);
			}
		} else if (action instanceof CreateSystemTestPlanAction) {
			if (menuText.equals("Create the system test plan")) {
				emp.setOverheadText("I'm creating the system test plan now");
			}
			if (partName.equals("Emp")) {
				((CreateSystemTestPlanAction) action).addEmp(emp);
			}
		} else if (action instanceof ReviewSystemTestPlanAction) {
			if (menuText.equals("Review the system test plan")) {
				emp.setOverheadText("I'm reviewing the system test plan now, to try to find any errors");
			}
			if (partName.equals("Emp")) {
				((ReviewSystemTestPlanAction) action).addEmp(emp);
			}
		} else if (action instanceof CorrectSystemTestPlanAction) {
			if (menuText.equals("Correct the system test plan")) {
				emp.setOverheadText("I'm correcting the system test plan now");
			}
			if (partName.equals("Emp")) {
				((CorrectSystemTestPlanAction) action).addEmp(emp);
			}
		} else if (action instanceof DeliverProductAction) {
			if (partName.equals("Emp")) {
				((DeliverProductAction) action).addEmp(emp);
			}
		} else if (action instanceof ChangePayRateAction) {
			if (partName.equals("Emp")) {
				((ChangePayRateAction) action).addEmp(emp);
			}
		} else if (action instanceof GiveBonusAction) {
			if (partName.equals("Emp")) {
				((GiveBonusAction) action).addEmp(emp);
			}
		} else if (action instanceof FireAction) {
			if (menuText.equals("Fire")) {
				emp.setOverheadText("I'm fired?! Waaahhh!");
			}
			if (partName.equals("FiredPerson")) {
				((FireAction) action).addFiredPerson(emp);
			}
		} else if (action instanceof PurchaseToolAction) {
			if (menuText.equals("Purchase tool(s)")) {
				emp.setOverheadText("Tool(s) have been purchased!");
			}
			if (partName.equals("EmpWhoseMenuClickedOn")) {
				((PurchaseToolAction) action).addEmpWhoseMenuClickedOn(emp);
			}
		}
		close();
	}
}
