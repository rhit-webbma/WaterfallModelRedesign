/* File generated by: simse.codegenerator.logicgenerator.dialoggenerator.NonEmployeeParticipantSelectionDialogGenerator */
package simse.logic.dialogs;

import java.util.Vector;

import javafx.event.EventHandler;
import javafx.geometry.Point2D;
import javafx.scene.control.Alert;
import javafx.scene.control.Alert.AlertType;
import javafx.scene.control.Button;
import javafx.scene.control.CheckBox;
import javafx.scene.control.Dialog;
import javafx.scene.control.Label;
import javafx.scene.control.Separator;
import javafx.scene.image.ImageView;
import javafx.scene.input.MouseEvent;
import javafx.scene.layout.BorderPane;
import javafx.scene.layout.GridPane;
import javafx.scene.layout.HBox;
import javafx.scene.layout.Pane;
import javafx.scene.layout.VBox;
import javafx.stage.Stage;
import javafx.stage.Window;
import javafx.stage.WindowEvent;
import simse.adts.actions.Action;
import simse.adts.actions.BreakAction;
import simse.adts.actions.ChangePayRateAction;
import simse.adts.actions.CorrectCodeAction;
import simse.adts.actions.CorrectDesignAction;
import simse.adts.actions.CorrectRequirementsAction;
import simse.adts.actions.CorrectSystemTestPlanAction;
import simse.adts.actions.CreateCodeAction;
import simse.adts.actions.CreateDesignAction;
import simse.adts.actions.CreateRequirementsAction;
import simse.adts.actions.CreateSystemTestPlanAction;
import simse.adts.actions.DeliverProductAction;
import simse.adts.actions.FireAction;
import simse.adts.actions.GetSickAction;
import simse.adts.actions.GiveBonusAction;
import simse.adts.actions.InspectCodeAction;
import simse.adts.actions.IntegrateCodeAction;
import simse.adts.actions.IntroduceNewRequirementsAction;
import simse.adts.actions.PurchaseToolAction;
import simse.adts.actions.QuitAction;
import simse.adts.actions.ReviewDesignAction;
import simse.adts.actions.ReviewRequirementsAction;
import simse.adts.actions.ReviewSystemTestPlanAction;
import simse.adts.actions.SuggestedDesignPhaseDurationAction;
import simse.adts.actions.SuggestedImplIntegrationPhaseDurationAction;
import simse.adts.actions.SuggestedRequirementsPhaseDurationAction;
import simse.adts.actions.SuggestedTestingPhaseDurationAction;
import simse.adts.actions.SystemTestAction;
import simse.adts.actions.UpdateProjectAttributesAction;
import simse.adts.objects.ACustomer;
import simse.adts.objects.Artifact;
import simse.adts.objects.AutomatedTestingTool;
import simse.adts.objects.Code;
import simse.adts.objects.Customer;
import simse.adts.objects.DesignDocument;
import simse.adts.objects.DesignEnvironment;
import simse.adts.objects.Employee;
import simse.adts.objects.IDE;
import simse.adts.objects.Project;
import simse.adts.objects.RequirementsCaptureTool;
import simse.adts.objects.RequirementsDocument;
import simse.adts.objects.SEProject;
import simse.adts.objects.SSObject;
import simse.adts.objects.SoftwareEngineer;
import simse.adts.objects.SystemTestPlan;
import simse.adts.objects.Tool;
import simse.gui.ImageLoader;
import simse.gui.TabPanel;
import simse.logic.dialogs.EmployeeParticipantSelectionDialog.ExitListener;
import simse.state.State;

public class NonEmployeeParticipantSelectionDialog extends Dialog<Action> implements EventHandler<MouseEvent> {
	private String partName;
	private Vector<SSObject> participants;
	private simse.adts.actions.Action action;
	private State state;
	private int minNumParts;
	private int maxNumParts;
	private Vector<CheckBox> checkBoxes;
	private Button checkAllButton;
	private Button clearAllButton;
	private Button okButton;
	private Button cancelButton;
	private boolean actionCancelled;
	private boolean dialogAccepted;

	public NonEmployeeParticipantSelectionDialog(Stage owner, String pName,
			Vector<SSObject> parts, simse.adts.actions.Action act, State s) {
		partName = pName;
		participants = parts;
		action = act;
		state = s;
		actionCancelled = false;
		dialogAccepted = false;
		setMinAndMax();
		if ((minNumParts == 0) || (participants.size() > 1)) {
			checkBoxes = new Vector<CheckBox>();
			setTitle("Participant Selection");
			VBox mainPane = new VBox();
			VBox topPane = new VBox();
			String title = "Choose ";
			title = title.concat(partName + " participant(s) (");
			if (minNumParts == maxNumParts) {
				title = title.concat("exactly " + minNumParts);
			} else {
				title = title.concat("at least " + minNumParts);
				if (maxNumParts < 999999) // not boundless
				{
					title = title.concat(", at most " + maxNumParts);
				}
			}
			title = title.concat("):");
			topPane.getChildren().add(new Label(title));
			topPane.setMinWidth(400);
			VBox middlePane = new VBox();
			for (int i = 0; i < participants.size(); i++) {
				SSObject tempObj = participants.elementAt(i);
				String label = new String();
				if (tempObj instanceof SoftwareEngineer) {
					label = ("SoftwareEngineer ("
							+ ((SoftwareEngineer) tempObj).getName() + ")");
				} else if (tempObj instanceof RequirementsDocument) {
					label = ("RequirementsDocument ("
							+ ((RequirementsDocument) tempObj).getName() + ")");
				} else if (tempObj instanceof DesignDocument) {
					label = ("DesignDocument ("
							+ ((DesignDocument) tempObj).getName() + ")");
				} else if (tempObj instanceof Code) {
					label = ("Code (" + ((Code) tempObj).getName() + ")");
				} else if (tempObj instanceof SystemTestPlan) {
					label = ("SystemTestPlan ("
							+ ((SystemTestPlan) tempObj).getName() + ")");
				} else if (tempObj instanceof SEProject) {
					label = ("SEProject ("
							+ ((SEProject) tempObj).getDescription() + ")");
				} else if (tempObj instanceof RequirementsCaptureTool) {
					label = ("RequirementsCaptureTool ("
							+ ((RequirementsCaptureTool) tempObj).getName() + ")");
				} else if (tempObj instanceof DesignEnvironment) {
					label = ("DesignEnvironment ("
							+ ((DesignEnvironment) tempObj).getName() + ")");
				} else if (tempObj instanceof IDE) {
					label = ("IDE (" + ((IDE) tempObj).getName() + ")");
				} else if (tempObj instanceof AutomatedTestingTool) {
					label = ("AutomatedTestingTool ("
							+ ((AutomatedTestingTool) tempObj).getName() + ")");
				} else if (tempObj instanceof ACustomer) {
					label = ("ACustomer (" + ((ACustomer) tempObj).getName() + ")");
				}
				BorderPane tempPane = new BorderPane();
				CheckBox tempCheckBox = new CheckBox(label);
				tempPane.setLeft(tempCheckBox);
				checkBoxes.add(tempCheckBox);
				ImageView icon = ImageLoader.getImageFromURL(TabPanel.getImage(tempObj));
				tempPane.setRight(new Label("", icon));
				middlePane.getChildren().add(tempPane);
			}
			HBox checkPane = new HBox();
			checkAllButton = new Button("Check All");
			checkAllButton.addEventHandler(MouseEvent.MOUSE_CLICKED, this);
			checkAllButton.setMinWidth(75);
			checkPane.getChildren().add(checkAllButton);
			clearAllButton = new Button("Clear All");
			clearAllButton.addEventHandler(MouseEvent.MOUSE_CLICKED, this);
			clearAllButton.setMinWidth(75);
			checkPane.getChildren().add(clearAllButton);
			HBox bottomPane = new HBox();
			okButton = new Button("OK");
			okButton.addEventHandler(MouseEvent.MOUSE_CLICKED, this);
			okButton.setMinWidth(75);
			bottomPane.getChildren().add(okButton);
			cancelButton = new Button("Cancel");
			cancelButton.addEventHandler(MouseEvent.MOUSE_CLICKED, this);
			cancelButton.setMinWidth(75);
			bottomPane.getChildren().add(cancelButton);
			mainPane.getChildren().addAll(topPane, middlePane);
			Separator separator1 = new Separator();
			separator1.setMaxSize(900, 5);
			mainPane.getChildren().addAll(separator1, checkPane);
			Separator separator2 = new Separator();
			separator2.setMaxSize(900, 5);
			mainPane.getChildren().addAll(separator2, bottomPane);
			this.getDialogPane().getChildren().add(mainPane);
			this.getDialogPane().setPrefSize(400, 400);
			this.getDialogPane().getScene().getWindow().setOnCloseRequest(new ExitListener());
			
			Point2D ownerLoc = new Point2D(owner.getX(), owner.getY());
			Point2D thisLoc = new Point2D((ownerLoc.getX() + (owner.getWidth() / 2) - (this.getWidth() / 2)),
					(ownerLoc.getY() + (owner.getHeight() / 2) - (this.getHeight() / 2)));
			this.setX(thisLoc.getX());
			this.setY(thisLoc.getY());
			
			showAndWait();
		} else {
			if (action instanceof CreateRequirementsAction) {
				if (partName.equals("ReqDoc")) {
					((CreateRequirementsAction) action)
							.addReqDoc((Artifact) participants.elementAt(0));
				} else if (partName.equals("Proj")) {
					((CreateRequirementsAction) action)
							.addProj((Project) participants.elementAt(0));
				} else if (partName.equals("RequirementsCaptureTool")) {
					((CreateRequirementsAction) action)
							.addRequirementsCaptureTool((Tool) participants
									.elementAt(0));
				} else if (partName.equals("AssociatedCodeDoc")) {
					((CreateRequirementsAction) action)
							.addAssociatedCodeDoc((Artifact) participants
									.elementAt(0));
				} else if (partName.equals("AssociatedDesignDoc")) {
					((CreateRequirementsAction) action)
							.addAssociatedDesignDoc((Artifact) participants
									.elementAt(0));
				} else if (partName.equals("AssociatedSystemTestPlan")) {
					((CreateRequirementsAction) action)
							.addAssociatedSystemTestPlan((Artifact) participants
									.elementAt(0));
				}
			} else if (action instanceof ReviewRequirementsAction) {
				if (partName.equals("RequirementsDoc")) {
					((ReviewRequirementsAction) action)
							.addRequirementsDoc((Artifact) participants
									.elementAt(0));
				} else if (partName.equals("Proj")) {
					((ReviewRequirementsAction) action)
							.addProj((Project) participants.elementAt(0));
				}
			} else if (action instanceof CorrectRequirementsAction) {
				if (partName.equals("RequirementsDoc")) {
					((CorrectRequirementsAction) action)
							.addRequirementsDoc((Artifact) participants
									.elementAt(0));
				} else if (partName.equals("Proj")) {
					((CorrectRequirementsAction) action)
							.addProj((Project) participants.elementAt(0));
				} else if (partName.equals("RequirementsCaptureTool")) {
					((CorrectRequirementsAction) action)
							.addRequirementsCaptureTool((Tool) participants
									.elementAt(0));
				}
			} else if (action instanceof CreateDesignAction) {
				if (partName.equals("DesignDoc")) {
					((CreateDesignAction) action)
							.addDesignDoc((Artifact) participants.elementAt(0));
				} else if (partName.equals("Proj")) {
					((CreateDesignAction) action)
							.addProj((Project) participants.elementAt(0));
				} else if (partName.equals("AssociatedRequirementsDoc")) {
					((CreateDesignAction) action)
							.addAssociatedRequirementsDoc((Artifact) participants
									.elementAt(0));
				} else if (partName.equals("DesignEnvironment")) {
					((CreateDesignAction) action)
							.addDesignEnvironment((Tool) participants
									.elementAt(0));
				} else if (partName.equals("AssociatedCodeDoc")) {
					((CreateDesignAction) action)
							.addAssociatedCodeDoc((Artifact) participants
									.elementAt(0));
				}
			} else if (action instanceof ReviewDesignAction) {
				if (partName.equals("DesignDoc")) {
					((ReviewDesignAction) action)
							.addDesignDoc((Artifact) participants.elementAt(0));
				} else if (partName.equals("Proj")) {
					((ReviewDesignAction) action)
							.addProj((Project) participants.elementAt(0));
				} else if (partName.equals("AssociatedRequirementsDoc")) {
					((ReviewDesignAction) action)
							.addAssociatedRequirementsDoc((Artifact) participants
									.elementAt(0));
				}
			} else if (action instanceof CorrectDesignAction) {
				if (partName.equals("DesignDoc")) {
					((CorrectDesignAction) action)
							.addDesignDoc((Artifact) participants.elementAt(0));
				} else if (partName.equals("Proj")) {
					((CorrectDesignAction) action)
							.addProj((Project) participants.elementAt(0));
				} else if (partName.equals("AssociatedRequirementsDoc")) {
					((CorrectDesignAction) action)
							.addAssociatedRequirementsDoc((Artifact) participants
									.elementAt(0));
				} else if (partName.equals("DesignEnvironment")) {
					((CorrectDesignAction) action)
							.addDesignEnvironment((Tool) participants
									.elementAt(0));
				}
			} else if (action instanceof CreateCodeAction) {
				if (partName.equals("CodeDoc")) {
					((CreateCodeAction) action)
							.addCodeDoc((Artifact) participants.elementAt(0));
				} else if (partName.equals("Proj")) {
					((CreateCodeAction) action).addProj((Project) participants
							.elementAt(0));
				} else if (partName.equals("AssociatedRequirementsDoc")) {
					((CreateCodeAction) action)
							.addAssociatedRequirementsDoc((Artifact) participants
									.elementAt(0));
				} else if (partName.equals("AssociatedDesignDocument")) {
					((CreateCodeAction) action)
							.addAssociatedDesignDocument((Artifact) participants
									.elementAt(0));
				} else if (partName.equals("DevelopmentEnvironment")) {
					((CreateCodeAction) action)
							.addDevelopmentEnvironment((Tool) participants
									.elementAt(0));
				} else if (partName.equals("AssociatedSystemTestPlan")) {
					((CreateCodeAction) action)
							.addAssociatedSystemTestPlan((Artifact) participants
									.elementAt(0));
				}
			} else if (action instanceof InspectCodeAction) {
				if (partName.equals("CodeDoc")) {
					((InspectCodeAction) action)
							.addCodeDoc((Artifact) participants.elementAt(0));
				} else if (partName.equals("Proj")) {
					((InspectCodeAction) action).addProj((Project) participants
							.elementAt(0));
				} else if (partName.equals("AssociatedRequirementsDoc")) {
					((InspectCodeAction) action)
							.addAssociatedRequirementsDoc((Artifact) participants
									.elementAt(0));
				} else if (partName.equals("AssociatedDesignDoc")) {
					((InspectCodeAction) action)
							.addAssociatedDesignDoc((Artifact) participants
									.elementAt(0));
				}
			} else if (action instanceof CorrectCodeAction) {
				if (partName.equals("CodeDoc")) {
					((CorrectCodeAction) action)
							.addCodeDoc((Artifact) participants.elementAt(0));
				} else if (partName.equals("Proj")) {
					((CorrectCodeAction) action).addProj((Project) participants
							.elementAt(0));
				} else if (partName.equals("AssociatedRequirementsDoc")) {
					((CorrectCodeAction) action)
							.addAssociatedRequirementsDoc((Artifact) participants
									.elementAt(0));
				} else if (partName.equals("AssociatedDesignDoc")) {
					((CorrectCodeAction) action)
							.addAssociatedDesignDoc((Artifact) participants
									.elementAt(0));
				} else if (partName.equals("DevelopmentEnvironment")) {
					((CorrectCodeAction) action)
							.addDevelopmentEnvironment((Tool) participants
									.elementAt(0));
				}
			} else if (action instanceof IntegrateCodeAction) {
				if (partName.equals("CodeDoc")) {
					((IntegrateCodeAction) action)
							.addCodeDoc((Artifact) participants.elementAt(0));
				} else if (partName.equals("Proj")) {
					((IntegrateCodeAction) action)
							.addProj((Project) participants.elementAt(0));
				} else if (partName.equals("AssociatedRequirementsDoc")) {
					((IntegrateCodeAction) action)
							.addAssociatedRequirementsDoc((Artifact) participants
									.elementAt(0));
				} else if (partName.equals("AssociatedDesignDoc")) {
					((IntegrateCodeAction) action)
							.addAssociatedDesignDoc((Artifact) participants
									.elementAt(0));
				} else if (partName.equals("DevelopmentEnvironment")) {
					((IntegrateCodeAction) action)
							.addDevelopmentEnvironment((Tool) participants
									.elementAt(0));
				}
			} else if (action instanceof SystemTestAction) {
				if (partName.equals("CodeDoc")) {
					((SystemTestAction) action)
							.addCodeDoc((Artifact) participants.elementAt(0));
				} else if (partName.equals("Proj")) {
					((SystemTestAction) action).addProj((Project) participants
							.elementAt(0));
				} else if (partName.equals("AssociatedSystemTestPlan")) {
					((SystemTestAction) action)
							.addAssociatedSystemTestPlan((Artifact) participants
									.elementAt(0));
				} else if (partName.equals("TestingTool")) {
					((SystemTestAction) action)
							.addTestingTool((Tool) participants.elementAt(0));
				}
			} else if (action instanceof CreateSystemTestPlanAction) {
				if (partName.equals("AssociatedCodeDoc")) {
					((CreateSystemTestPlanAction) action)
							.addAssociatedCodeDoc((Artifact) participants
									.elementAt(0));
				} else if (partName.equals("Proj")) {
					((CreateSystemTestPlanAction) action)
							.addProj((Project) participants.elementAt(0));
				} else if (partName.equals("SystemTestPlanDoc")) {
					((CreateSystemTestPlanAction) action)
							.addSystemTestPlanDoc((Artifact) participants
									.elementAt(0));
				} else if (partName.equals("AssociatedRequirementsDoc")) {
					((CreateSystemTestPlanAction) action)
							.addAssociatedRequirementsDoc((Artifact) participants
									.elementAt(0));
				} else if (partName.equals("TestingTool")) {
					((CreateSystemTestPlanAction) action)
							.addTestingTool((Tool) participants.elementAt(0));
				}
			} else if (action instanceof ReviewSystemTestPlanAction) {
				if (partName.equals("TestPlan")) {
					((ReviewSystemTestPlanAction) action)
							.addTestPlan((Artifact) participants.elementAt(0));
				} else if (partName.equals("AssociatedRequirementsDoc")) {
					((ReviewSystemTestPlanAction) action)
							.addAssociatedRequirementsDoc((Artifact) participants
									.elementAt(0));
				} else if (partName.equals("Proj")) {
					((ReviewSystemTestPlanAction) action)
							.addProj((Project) participants.elementAt(0));
				}
			} else if (action instanceof CorrectSystemTestPlanAction) {
				if (partName.equals("TestPlan")) {
					((CorrectSystemTestPlanAction) action)
							.addTestPlan((Artifact) participants.elementAt(0));
				} else if (partName.equals("AssociatedRequirementsDoc")) {
					((CorrectSystemTestPlanAction) action)
							.addAssociatedRequirementsDoc((Artifact) participants
									.elementAt(0));
				} else if (partName.equals("Proj")) {
					((CorrectSystemTestPlanAction) action)
							.addProj((Project) participants.elementAt(0));
				} else if (partName.equals("TestingTool")) {
					((CorrectSystemTestPlanAction) action)
							.addTestingTool((Tool) participants.elementAt(0));
				}
			} else if (action instanceof DeliverProductAction) {
				if (partName.equals("Proj")) {
					((DeliverProductAction) action)
							.addProj((Project) participants.elementAt(0));
				} else if (partName.equals("CodeDoc")) {
					((DeliverProductAction) action)
							.addCodeDoc((Artifact) participants.elementAt(0));
				} else if (partName.equals("Cust")) {
					((DeliverProductAction) action)
							.addCust((Customer) participants.elementAt(0));
				}
			} else if (action instanceof BreakAction) {
			} else if (action instanceof GetSickAction) {
			} else if (action instanceof QuitAction) {
			} else if (action instanceof IntroduceNewRequirementsAction) {
				if (partName.equals("Cust")) {
					((IntroduceNewRequirementsAction) action)
							.addCust((Customer) participants.elementAt(0));
				} else if (partName.equals("AssociatedRequirementsDocument")) {
					((IntroduceNewRequirementsAction) action)
							.addAssociatedRequirementsDocument((Artifact) participants
									.elementAt(0));
				} else if (partName.equals("Proj")) {
					((IntroduceNewRequirementsAction) action)
							.addProj((Project) participants.elementAt(0));
				} else if (partName.equals("AssociatedCode")) {
					((IntroduceNewRequirementsAction) action)
							.addAssociatedCode((Artifact) participants
									.elementAt(0));
				} else if (partName.equals("AssociatedDesignDocument")) {
					((IntroduceNewRequirementsAction) action)
							.addAssociatedDesignDocument((Artifact) participants
									.elementAt(0));
				} else if (partName.equals("AssociatedSystemTestPlan")) {
					((IntroduceNewRequirementsAction) action)
							.addAssociatedSystemTestPlan((Artifact) participants
									.elementAt(0));
				}
			} else if (action instanceof UpdateProjectAttributesAction) {
				if (partName.equals("Proj")) {
					((UpdateProjectAttributesAction) action)
							.addProj((Project) participants.elementAt(0));
				}
			} else if (action instanceof ChangePayRateAction) {
			} else if (action instanceof GiveBonusAction) {
				if (partName.equals("ProjectWithBudget")) {
					((GiveBonusAction) action)
							.addProjectWithBudget((Project) participants
									.elementAt(0));
				}
			} else if (action instanceof FireAction) {
			} else if (action instanceof PurchaseToolAction) {
				if (partName.equals("SETool")) {
					((PurchaseToolAction) action).addSETool((Tool) participants
							.elementAt(0));
				} else if (partName.equals("Proj")) {
					((PurchaseToolAction) action)
							.addProj((Project) participants.elementAt(0));
				}
			} else if (action instanceof SuggestedRequirementsPhaseDurationAction) {
				if (partName.equals("Proj")) {
					((SuggestedRequirementsPhaseDurationAction) action)
							.addProj((Project) participants.elementAt(0));
				}
			} else if (action instanceof SuggestedDesignPhaseDurationAction) {
				if (partName.equals("Proj")) {
					((SuggestedDesignPhaseDurationAction) action)
							.addProj((Project) participants.elementAt(0));
				}
			} else if (action instanceof SuggestedImplIntegrationPhaseDurationAction) {
				if (partName.equals("Proj")) {
					((SuggestedImplIntegrationPhaseDurationAction) action)
							.addProj((Project) participants.elementAt(0));
				}
			} else if (action instanceof SuggestedTestingPhaseDurationAction) {
				if (partName.equals("Proj")) {
					((SuggestedTestingPhaseDurationAction) action)
							.addProj((Project) participants.elementAt(0));
				}
			}
		}
	}
	
	private void closeDialog(boolean accepted) {
		dialogAccepted = accepted;
		Window window = this.getDialogPane().getScene().getWindow();
		window.fireEvent(new WindowEvent(window, WindowEvent.WINDOW_CLOSE_REQUEST));
	}
	
	@Override
	public void handle(MouseEvent evt) {
		Object source = evt.getSource();
		if (source == cancelButton) {
			actionCancelled = true;
			closeDialog(false);
		} else if (source == okButton) {
			Vector<CheckBox> checkedBoxes = new Vector<CheckBox>();
			for (int i = 0; i < checkBoxes.size(); i++) {
				CheckBox tempCBox = checkBoxes.elementAt(i);
				if (tempCBox.isSelected()) {
					checkedBoxes.add(tempCBox);
				}
			}
			if (checkedBoxes.size() < minNumParts) {
				Alert alert = new Alert(AlertType.WARNING, "You must choose at least one action");
				alert.setTitle("Invalid Input");
				alert.setHeaderText(null);
				alert.show();
			} else if (checkedBoxes.size() > maxNumParts) {
				Alert alert = new Alert(AlertType.WARNING, "You may only choose at most " + maxNumParts + " participants");
				alert.setTitle("Invalid Input");
				alert.setHeaderText(null);
				alert.show();
			} else {
				for (int i = 0; i < checkedBoxes.size(); i++) {
					CheckBox checkedBox = checkedBoxes.elementAt(i);
					String cBoxText = checkedBox.getText();
					String objTypeName = cBoxText.substring(0,
							(cBoxText.indexOf('(') - 1));
					String keyValStr = cBoxText.substring(
							(cBoxText.indexOf('(') + 1),
							cBoxText.lastIndexOf(')'));

					addParticipant(objTypeName, keyValStr);
				}
				closeDialog(true);
			}
		} else if (source == checkAllButton) {
			for (int i = 0; i < checkBoxes.size(); i++) {
				checkBoxes.elementAt(i).setSelected(true);
			}
		} else if (source == clearAllButton) {
			for (int i = 0; i < checkBoxes.size(); i++) {
				checkBoxes.elementAt(i).setSelected(false);
			}
		}
	}

	private void addParticipant(String objTypeName, String keyValStr) {
		if (objTypeName.equals("SoftwareEngineer")) {
			SoftwareEngineer a = state.getEmployeeStateRepository()
					.getSoftwareEngineerStateRepository().get(keyValStr);
			if (a != null) {
				if (action instanceof CreateRequirementsAction) {
					if (partName.equals("Emp")) {
						((CreateRequirementsAction) action)
								.addEmp((Employee) a);
					}
				} else if (action instanceof ReviewRequirementsAction) {
					if (partName.equals("Emp")) {
						((ReviewRequirementsAction) action)
								.addEmp((Employee) a);
					}
				} else if (action instanceof CorrectRequirementsAction) {
					if (partName.equals("Emp")) {
						((CorrectRequirementsAction) action)
								.addEmp((Employee) a);
					}
				} else if (action instanceof CreateDesignAction) {
					if (partName.equals("Emp")) {
						((CreateDesignAction) action).addEmp((Employee) a);
					}
				} else if (action instanceof ReviewDesignAction) {
					if (partName.equals("Emp")) {
						((ReviewDesignAction) action).addEmp((Employee) a);
					}
				} else if (action instanceof CorrectDesignAction) {
					if (partName.equals("Emp")) {
						((CorrectDesignAction) action).addEmp((Employee) a);
					}
				} else if (action instanceof CreateCodeAction) {
					if (partName.equals("Emp")) {
						((CreateCodeAction) action).addEmp((Employee) a);
					}
				} else if (action instanceof InspectCodeAction) {
					if (partName.equals("Emp")) {
						((InspectCodeAction) action).addEmp((Employee) a);
					}
				} else if (action instanceof CorrectCodeAction) {
					if (partName.equals("Emp")) {
						((CorrectCodeAction) action).addEmp((Employee) a);
					}
				} else if (action instanceof IntegrateCodeAction) {
					if (partName.equals("Emp")) {
						((IntegrateCodeAction) action).addEmp((Employee) a);
					}
				} else if (action instanceof SystemTestAction) {
					if (partName.equals("Emp")) {
						((SystemTestAction) action).addEmp((Employee) a);
					}
				} else if (action instanceof CreateSystemTestPlanAction) {
					if (partName.equals("Emp")) {
						((CreateSystemTestPlanAction) action)
								.addEmp((Employee) a);
					}
				} else if (action instanceof ReviewSystemTestPlanAction) {
					if (partName.equals("Emp")) {
						((ReviewSystemTestPlanAction) action)
								.addEmp((Employee) a);
					}
				} else if (action instanceof CorrectSystemTestPlanAction) {
					if (partName.equals("Emp")) {
						((CorrectSystemTestPlanAction) action)
								.addEmp((Employee) a);
					}
				} else if (action instanceof DeliverProductAction) {
					if (partName.equals("Emp")) {
						((DeliverProductAction) action).addEmp((Employee) a);
					}
				} else if (action instanceof ChangePayRateAction) {
					if (partName.equals("Emp")) {
						((ChangePayRateAction) action).addEmp((Employee) a);
					}
				} else if (action instanceof GiveBonusAction) {
					if (partName.equals("Emp")) {
						((GiveBonusAction) action).addEmp((Employee) a);
					}
				} else if (action instanceof FireAction) {
					if (partName.equals("FiredPerson")) {
						((FireAction) action).addFiredPerson((Employee) a);
					}
				} else if (action instanceof PurchaseToolAction) {
					if (partName.equals("EmpWhoseMenuClickedOn")) {
						((PurchaseToolAction) action)
								.addEmpWhoseMenuClickedOn((Employee) a);
					}
				}
			}
		} else if (objTypeName.equals("RequirementsDocument")) {
			RequirementsDocument a = state.getArtifactStateRepository()
					.getRequirementsDocumentStateRepository().get(keyValStr);
			if (a != null) {
				if (action instanceof CreateRequirementsAction) {
					if (partName.equals("ReqDoc")) {
						((CreateRequirementsAction) action)
								.addReqDoc((Artifact) a);
					}
				} else if (action instanceof ReviewRequirementsAction) {
					if (partName.equals("RequirementsDoc")) {
						((ReviewRequirementsAction) action)
								.addRequirementsDoc((Artifact) a);
					}
				} else if (action instanceof CorrectRequirementsAction) {
					if (partName.equals("RequirementsDoc")) {
						((CorrectRequirementsAction) action)
								.addRequirementsDoc((Artifact) a);
					}
				} else if (action instanceof CreateDesignAction) {
					if (partName.equals("AssociatedRequirementsDoc")) {
						((CreateDesignAction) action)
								.addAssociatedRequirementsDoc((Artifact) a);
					}
				} else if (action instanceof ReviewDesignAction) {
					if (partName.equals("AssociatedRequirementsDoc")) {
						((ReviewDesignAction) action)
								.addAssociatedRequirementsDoc((Artifact) a);
					}
				} else if (action instanceof CorrectDesignAction) {
					if (partName.equals("AssociatedRequirementsDoc")) {
						((CorrectDesignAction) action)
								.addAssociatedRequirementsDoc((Artifact) a);
					}
				} else if (action instanceof CreateCodeAction) {
					if (partName.equals("AssociatedRequirementsDoc")) {
						((CreateCodeAction) action)
								.addAssociatedRequirementsDoc((Artifact) a);
					}
				} else if (action instanceof InspectCodeAction) {
					if (partName.equals("AssociatedRequirementsDoc")) {
						((InspectCodeAction) action)
								.addAssociatedRequirementsDoc((Artifact) a);
					}
				} else if (action instanceof CorrectCodeAction) {
					if (partName.equals("AssociatedRequirementsDoc")) {
						((CorrectCodeAction) action)
								.addAssociatedRequirementsDoc((Artifact) a);
					}
				} else if (action instanceof IntegrateCodeAction) {
					if (partName.equals("AssociatedRequirementsDoc")) {
						((IntegrateCodeAction) action)
								.addAssociatedRequirementsDoc((Artifact) a);
					}
				} else if (action instanceof SystemTestAction) {
				} else if (action instanceof CreateSystemTestPlanAction) {
					if (partName.equals("AssociatedRequirementsDoc")) {
						((CreateSystemTestPlanAction) action)
								.addAssociatedRequirementsDoc((Artifact) a);
					}
				} else if (action instanceof ReviewSystemTestPlanAction) {
					if (partName.equals("AssociatedRequirementsDoc")) {
						((ReviewSystemTestPlanAction) action)
								.addAssociatedRequirementsDoc((Artifact) a);
					}
				} else if (action instanceof CorrectSystemTestPlanAction) {
					if (partName.equals("AssociatedRequirementsDoc")) {
						((CorrectSystemTestPlanAction) action)
								.addAssociatedRequirementsDoc((Artifact) a);
					}
				} else if (action instanceof DeliverProductAction) {
				} else if (action instanceof ChangePayRateAction) {
				} else if (action instanceof GiveBonusAction) {
				} else if (action instanceof FireAction) {
				} else if (action instanceof PurchaseToolAction) {
				}
			}
		} else if (objTypeName.equals("DesignDocument")) {
			DesignDocument a = state.getArtifactStateRepository()
					.getDesignDocumentStateRepository().get(keyValStr);
			if (a != null) {
				if (action instanceof CreateRequirementsAction) {
					if (partName.equals("AssociatedDesignDoc")) {
						((CreateRequirementsAction) action)
								.addAssociatedDesignDoc((Artifact) a);
					}
				} else if (action instanceof ReviewRequirementsAction) {
				} else if (action instanceof CorrectRequirementsAction) {
				} else if (action instanceof CreateDesignAction) {
					if (partName.equals("DesignDoc")) {
						((CreateDesignAction) action)
								.addDesignDoc((Artifact) a);
					}
				} else if (action instanceof ReviewDesignAction) {
					if (partName.equals("DesignDoc")) {
						((ReviewDesignAction) action)
								.addDesignDoc((Artifact) a);
					}
				} else if (action instanceof CorrectDesignAction) {
					if (partName.equals("DesignDoc")) {
						((CorrectDesignAction) action)
								.addDesignDoc((Artifact) a);
					}
				} else if (action instanceof CreateCodeAction) {
					if (partName.equals("AssociatedDesignDocument")) {
						((CreateCodeAction) action)
								.addAssociatedDesignDocument((Artifact) a);
					}
				} else if (action instanceof InspectCodeAction) {
					if (partName.equals("AssociatedDesignDoc")) {
						((InspectCodeAction) action)
								.addAssociatedDesignDoc((Artifact) a);
					}
				} else if (action instanceof CorrectCodeAction) {
					if (partName.equals("AssociatedDesignDoc")) {
						((CorrectCodeAction) action)
								.addAssociatedDesignDoc((Artifact) a);
					}
				} else if (action instanceof IntegrateCodeAction) {
					if (partName.equals("AssociatedDesignDoc")) {
						((IntegrateCodeAction) action)
								.addAssociatedDesignDoc((Artifact) a);
					}
				} else if (action instanceof SystemTestAction) {
				} else if (action instanceof CreateSystemTestPlanAction) {
				} else if (action instanceof ReviewSystemTestPlanAction) {
				} else if (action instanceof CorrectSystemTestPlanAction) {
				} else if (action instanceof DeliverProductAction) {
				} else if (action instanceof ChangePayRateAction) {
				} else if (action instanceof GiveBonusAction) {
				} else if (action instanceof FireAction) {
				} else if (action instanceof PurchaseToolAction) {
				}
			}
		} else if (objTypeName.equals("Code")) {
			Code a = state.getArtifactStateRepository()
					.getCodeStateRepository().get(keyValStr);
			if (a != null) {
				if (action instanceof CreateRequirementsAction) {
					if (partName.equals("AssociatedCodeDoc")) {
						((CreateRequirementsAction) action)
								.addAssociatedCodeDoc((Artifact) a);
					}
				} else if (action instanceof ReviewRequirementsAction) {
				} else if (action instanceof CorrectRequirementsAction) {
				} else if (action instanceof CreateDesignAction) {
					if (partName.equals("AssociatedCodeDoc")) {
						((CreateDesignAction) action)
								.addAssociatedCodeDoc((Artifact) a);
					}
				} else if (action instanceof ReviewDesignAction) {
				} else if (action instanceof CorrectDesignAction) {
				} else if (action instanceof CreateCodeAction) {
					if (partName.equals("CodeDoc")) {
						((CreateCodeAction) action).addCodeDoc((Artifact) a);
					}
				} else if (action instanceof InspectCodeAction) {
					if (partName.equals("CodeDoc")) {
						((InspectCodeAction) action).addCodeDoc((Artifact) a);
					}
				} else if (action instanceof CorrectCodeAction) {
					if (partName.equals("CodeDoc")) {
						((CorrectCodeAction) action).addCodeDoc((Artifact) a);
					}
				} else if (action instanceof IntegrateCodeAction) {
					if (partName.equals("CodeDoc")) {
						((IntegrateCodeAction) action).addCodeDoc((Artifact) a);
					}
				} else if (action instanceof SystemTestAction) {
					if (partName.equals("CodeDoc")) {
						((SystemTestAction) action).addCodeDoc((Artifact) a);
					}
				} else if (action instanceof CreateSystemTestPlanAction) {
					if (partName.equals("AssociatedCodeDoc")) {
						((CreateSystemTestPlanAction) action)
								.addAssociatedCodeDoc((Artifact) a);
					}
				} else if (action instanceof ReviewSystemTestPlanAction) {
				} else if (action instanceof CorrectSystemTestPlanAction) {
				} else if (action instanceof DeliverProductAction) {
					if (partName.equals("CodeDoc")) {
						((DeliverProductAction) action)
								.addCodeDoc((Artifact) a);
					}
				} else if (action instanceof ChangePayRateAction) {
				} else if (action instanceof GiveBonusAction) {
				} else if (action instanceof FireAction) {
				} else if (action instanceof PurchaseToolAction) {
				}
			}
		} else if (objTypeName.equals("SystemTestPlan")) {
			SystemTestPlan a = state.getArtifactStateRepository()
					.getSystemTestPlanStateRepository().get(keyValStr);
			if (a != null) {
				if (action instanceof CreateRequirementsAction) {
					if (partName.equals("AssociatedSystemTestPlan")) {
						((CreateRequirementsAction) action)
								.addAssociatedSystemTestPlan((Artifact) a);
					}
				} else if (action instanceof ReviewRequirementsAction) {
				} else if (action instanceof CorrectRequirementsAction) {
				} else if (action instanceof CreateDesignAction) {
				} else if (action instanceof ReviewDesignAction) {
				} else if (action instanceof CorrectDesignAction) {
				} else if (action instanceof CreateCodeAction) {
					if (partName.equals("AssociatedSystemTestPlan")) {
						((CreateCodeAction) action)
								.addAssociatedSystemTestPlan((Artifact) a);
					}
				} else if (action instanceof InspectCodeAction) {
				} else if (action instanceof CorrectCodeAction) {
				} else if (action instanceof IntegrateCodeAction) {
				} else if (action instanceof SystemTestAction) {
					if (partName.equals("AssociatedSystemTestPlan")) {
						((SystemTestAction) action)
								.addAssociatedSystemTestPlan((Artifact) a);
					}
				} else if (action instanceof CreateSystemTestPlanAction) {
					if (partName.equals("SystemTestPlanDoc")) {
						((CreateSystemTestPlanAction) action)
								.addSystemTestPlanDoc((Artifact) a);
					}
				} else if (action instanceof ReviewSystemTestPlanAction) {
					if (partName.equals("TestPlan")) {
						((ReviewSystemTestPlanAction) action)
								.addTestPlan((Artifact) a);
					}
				} else if (action instanceof CorrectSystemTestPlanAction) {
					if (partName.equals("TestPlan")) {
						((CorrectSystemTestPlanAction) action)
								.addTestPlan((Artifact) a);
					}
				} else if (action instanceof DeliverProductAction) {
				} else if (action instanceof ChangePayRateAction) {
				} else if (action instanceof GiveBonusAction) {
				} else if (action instanceof FireAction) {
				} else if (action instanceof PurchaseToolAction) {
				}
			}
		} else if (objTypeName.equals("SEProject")) {
			SEProject a = state.getProjectStateRepository()
					.getSEProjectStateRepository().get(keyValStr);
			if (a != null) {
				if (action instanceof CreateRequirementsAction) {
					if (partName.equals("Proj")) {
						((CreateRequirementsAction) action)
								.addProj((Project) a);
					}
				} else if (action instanceof ReviewRequirementsAction) {
					if (partName.equals("Proj")) {
						((ReviewRequirementsAction) action)
								.addProj((Project) a);
					}
				} else if (action instanceof CorrectRequirementsAction) {
					if (partName.equals("Proj")) {
						((CorrectRequirementsAction) action)
								.addProj((Project) a);
					}
				} else if (action instanceof CreateDesignAction) {
					if (partName.equals("Proj")) {
						((CreateDesignAction) action).addProj((Project) a);
					}
				} else if (action instanceof ReviewDesignAction) {
					if (partName.equals("Proj")) {
						((ReviewDesignAction) action).addProj((Project) a);
					}
				} else if (action instanceof CorrectDesignAction) {
					if (partName.equals("Proj")) {
						((CorrectDesignAction) action).addProj((Project) a);
					}
				} else if (action instanceof CreateCodeAction) {
					if (partName.equals("Proj")) {
						((CreateCodeAction) action).addProj((Project) a);
					}
				} else if (action instanceof InspectCodeAction) {
					if (partName.equals("Proj")) {
						((InspectCodeAction) action).addProj((Project) a);
					}
				} else if (action instanceof CorrectCodeAction) {
					if (partName.equals("Proj")) {
						((CorrectCodeAction) action).addProj((Project) a);
					}
				} else if (action instanceof IntegrateCodeAction) {
					if (partName.equals("Proj")) {
						((IntegrateCodeAction) action).addProj((Project) a);
					}
				} else if (action instanceof SystemTestAction) {
					if (partName.equals("Proj")) {
						((SystemTestAction) action).addProj((Project) a);
					}
				} else if (action instanceof CreateSystemTestPlanAction) {
					if (partName.equals("Proj")) {
						((CreateSystemTestPlanAction) action)
								.addProj((Project) a);
					}
				} else if (action instanceof ReviewSystemTestPlanAction) {
					if (partName.equals("Proj")) {
						((ReviewSystemTestPlanAction) action)
								.addProj((Project) a);
					}
				} else if (action instanceof CorrectSystemTestPlanAction) {
					if (partName.equals("Proj")) {
						((CorrectSystemTestPlanAction) action)
								.addProj((Project) a);
					}
				} else if (action instanceof DeliverProductAction) {
					if (partName.equals("Proj")) {
						((DeliverProductAction) action).addProj((Project) a);
					}
				} else if (action instanceof ChangePayRateAction) {
				} else if (action instanceof GiveBonusAction) {
					if (partName.equals("ProjectWithBudget")) {
						((GiveBonusAction) action)
								.addProjectWithBudget((Project) a);
					}
				} else if (action instanceof FireAction) {
				} else if (action instanceof PurchaseToolAction) {
					if (partName.equals("Proj")) {
						((PurchaseToolAction) action).addProj((Project) a);
					}
				}
			}
		} else if (objTypeName.equals("RequirementsCaptureTool")) {
			RequirementsCaptureTool a = state.getToolStateRepository()
					.getRequirementsCaptureToolStateRepository().get(keyValStr);
			if (a != null) {
				if (action instanceof CreateRequirementsAction) {
					if (partName.equals("RequirementsCaptureTool")) {
						((CreateRequirementsAction) action)
								.addRequirementsCaptureTool((Tool) a);
					}
				} else if (action instanceof ReviewRequirementsAction) {
				} else if (action instanceof CorrectRequirementsAction) {
					if (partName.equals("RequirementsCaptureTool")) {
						((CorrectRequirementsAction) action)
								.addRequirementsCaptureTool((Tool) a);
					}
				} else if (action instanceof CreateDesignAction) {
				} else if (action instanceof ReviewDesignAction) {
				} else if (action instanceof CorrectDesignAction) {
				} else if (action instanceof CreateCodeAction) {
				} else if (action instanceof InspectCodeAction) {
				} else if (action instanceof CorrectCodeAction) {
				} else if (action instanceof IntegrateCodeAction) {
				} else if (action instanceof SystemTestAction) {
				} else if (action instanceof CreateSystemTestPlanAction) {
				} else if (action instanceof ReviewSystemTestPlanAction) {
				} else if (action instanceof CorrectSystemTestPlanAction) {
				} else if (action instanceof DeliverProductAction) {
				} else if (action instanceof ChangePayRateAction) {
				} else if (action instanceof GiveBonusAction) {
				} else if (action instanceof FireAction) {
				} else if (action instanceof PurchaseToolAction) {
					if (partName.equals("SETool")) {
						((PurchaseToolAction) action).addSETool((Tool) a);
					}
				}
			}
		} else if (objTypeName.equals("DesignEnvironment")) {
			DesignEnvironment a = state.getToolStateRepository()
					.getDesignEnvironmentStateRepository().get(keyValStr);
			if (a != null) {
				if (action instanceof CreateRequirementsAction) {
				} else if (action instanceof ReviewRequirementsAction) {
				} else if (action instanceof CorrectRequirementsAction) {
				} else if (action instanceof CreateDesignAction) {
					if (partName.equals("DesignEnvironment")) {
						((CreateDesignAction) action)
								.addDesignEnvironment((Tool) a);
					}
				} else if (action instanceof ReviewDesignAction) {
				} else if (action instanceof CorrectDesignAction) {
					if (partName.equals("DesignEnvironment")) {
						((CorrectDesignAction) action)
								.addDesignEnvironment((Tool) a);
					}
				} else if (action instanceof CreateCodeAction) {
				} else if (action instanceof InspectCodeAction) {
				} else if (action instanceof CorrectCodeAction) {
				} else if (action instanceof IntegrateCodeAction) {
				} else if (action instanceof SystemTestAction) {
				} else if (action instanceof CreateSystemTestPlanAction) {
				} else if (action instanceof ReviewSystemTestPlanAction) {
				} else if (action instanceof CorrectSystemTestPlanAction) {
				} else if (action instanceof DeliverProductAction) {
				} else if (action instanceof ChangePayRateAction) {
				} else if (action instanceof GiveBonusAction) {
				} else if (action instanceof FireAction) {
				} else if (action instanceof PurchaseToolAction) {
					if (partName.equals("SETool")) {
						((PurchaseToolAction) action).addSETool((Tool) a);
					}
				}
			}
		} else if (objTypeName.equals("IDE")) {
			IDE a = state.getToolStateRepository().getIDEStateRepository()
					.get(keyValStr);
			if (a != null) {
				if (action instanceof CreateRequirementsAction) {
				} else if (action instanceof ReviewRequirementsAction) {
				} else if (action instanceof CorrectRequirementsAction) {
				} else if (action instanceof CreateDesignAction) {
				} else if (action instanceof ReviewDesignAction) {
				} else if (action instanceof CorrectDesignAction) {
				} else if (action instanceof CreateCodeAction) {
					if (partName.equals("DevelopmentEnvironment")) {
						((CreateCodeAction) action)
								.addDevelopmentEnvironment((Tool) a);
					}
				} else if (action instanceof InspectCodeAction) {
				} else if (action instanceof CorrectCodeAction) {
					if (partName.equals("DevelopmentEnvironment")) {
						((CorrectCodeAction) action)
								.addDevelopmentEnvironment((Tool) a);
					}
				} else if (action instanceof IntegrateCodeAction) {
					if (partName.equals("DevelopmentEnvironment")) {
						((IntegrateCodeAction) action)
								.addDevelopmentEnvironment((Tool) a);
					}
				} else if (action instanceof SystemTestAction) {
				} else if (action instanceof CreateSystemTestPlanAction) {
				} else if (action instanceof ReviewSystemTestPlanAction) {
				} else if (action instanceof CorrectSystemTestPlanAction) {
				} else if (action instanceof DeliverProductAction) {
				} else if (action instanceof ChangePayRateAction) {
				} else if (action instanceof GiveBonusAction) {
				} else if (action instanceof FireAction) {
				} else if (action instanceof PurchaseToolAction) {
					if (partName.equals("SETool")) {
						((PurchaseToolAction) action).addSETool((Tool) a);
					}
				}
			}
		} else if (objTypeName.equals("AutomatedTestingTool")) {
			AutomatedTestingTool a = state.getToolStateRepository()
					.getAutomatedTestingToolStateRepository().get(keyValStr);
			if (a != null) {
				if (action instanceof CreateRequirementsAction) {
				} else if (action instanceof ReviewRequirementsAction) {
				} else if (action instanceof CorrectRequirementsAction) {
				} else if (action instanceof CreateDesignAction) {
				} else if (action instanceof ReviewDesignAction) {
				} else if (action instanceof CorrectDesignAction) {
				} else if (action instanceof CreateCodeAction) {
				} else if (action instanceof InspectCodeAction) {
				} else if (action instanceof CorrectCodeAction) {
				} else if (action instanceof IntegrateCodeAction) {
				} else if (action instanceof SystemTestAction) {
					if (partName.equals("TestingTool")) {
						((SystemTestAction) action).addTestingTool((Tool) a);
					}
				} else if (action instanceof CreateSystemTestPlanAction) {
					if (partName.equals("TestingTool")) {
						((CreateSystemTestPlanAction) action)
								.addTestingTool((Tool) a);
					}
				} else if (action instanceof ReviewSystemTestPlanAction) {
				} else if (action instanceof CorrectSystemTestPlanAction) {
					if (partName.equals("TestingTool")) {
						((CorrectSystemTestPlanAction) action)
								.addTestingTool((Tool) a);
					}
				} else if (action instanceof DeliverProductAction) {
				} else if (action instanceof ChangePayRateAction) {
				} else if (action instanceof GiveBonusAction) {
				} else if (action instanceof FireAction) {
				} else if (action instanceof PurchaseToolAction) {
					if (partName.equals("SETool")) {
						((PurchaseToolAction) action).addSETool((Tool) a);
					}
				}
			}
		} else if (objTypeName.equals("ACustomer")) {
			ACustomer a = state.getCustomerStateRepository()
					.getACustomerStateRepository().get(keyValStr);
			if (a != null) {
				if (action instanceof CreateRequirementsAction) {
				} else if (action instanceof ReviewRequirementsAction) {
				} else if (action instanceof CorrectRequirementsAction) {
				} else if (action instanceof CreateDesignAction) {
				} else if (action instanceof ReviewDesignAction) {
				} else if (action instanceof CorrectDesignAction) {
				} else if (action instanceof CreateCodeAction) {
				} else if (action instanceof InspectCodeAction) {
				} else if (action instanceof CorrectCodeAction) {
				} else if (action instanceof IntegrateCodeAction) {
				} else if (action instanceof SystemTestAction) {
				} else if (action instanceof CreateSystemTestPlanAction) {
				} else if (action instanceof ReviewSystemTestPlanAction) {
				} else if (action instanceof CorrectSystemTestPlanAction) {
				} else if (action instanceof DeliverProductAction) {
					if (partName.equals("Cust")) {
						((DeliverProductAction) action).addCust((Customer) a);
					}
				} else if (action instanceof ChangePayRateAction) {
				} else if (action instanceof GiveBonusAction) {
				} else if (action instanceof FireAction) {
				} else if (action instanceof PurchaseToolAction) {
				}
			}
		}
	}

	private void setMinAndMax() {
		if (action instanceof CreateRequirementsAction) {
			if (partName.equals("Emp")) {
				minNumParts = 1;
				maxNumParts = 999999;
			} else if (partName.equals("ReqDoc")) {
				minNumParts = 1;
				maxNumParts = 1;
			} else if (partName.equals("Proj")) {
				minNumParts = 1;
				maxNumParts = 1;
			} else if (partName.equals("RequirementsCaptureTool")) {
				minNumParts = 0;
				maxNumParts = 999999;
			} else if (partName.equals("AssociatedCodeDoc")) {
				minNumParts = 1;
				maxNumParts = 1;
			} else if (partName.equals("AssociatedDesignDoc")) {
				minNumParts = 1;
				maxNumParts = 1;
			} else if (partName.equals("AssociatedSystemTestPlan")) {
				minNumParts = 1;
				maxNumParts = 1;
			}
		} else if (action instanceof ReviewRequirementsAction) {
			if (partName.equals("Emp")) {
				minNumParts = 1;
				maxNumParts = 999999;
			} else if (partName.equals("RequirementsDoc")) {
				minNumParts = 1;
				maxNumParts = 1;
			} else if (partName.equals("Proj")) {
				minNumParts = 1;
				maxNumParts = 1;
			}
		} else if (action instanceof CorrectRequirementsAction) {
			if (partName.equals("Emp")) {
				minNumParts = 1;
				maxNumParts = 999999;
			} else if (partName.equals("RequirementsDoc")) {
				minNumParts = 1;
				maxNumParts = 1;
			} else if (partName.equals("Proj")) {
				minNumParts = 1;
				maxNumParts = 1;
			} else if (partName.equals("RequirementsCaptureTool")) {
				minNumParts = 0;
				maxNumParts = 999999;
			}
		} else if (action instanceof CreateDesignAction) {
			if (partName.equals("Emp")) {
				minNumParts = 1;
				maxNumParts = 999999;
			} else if (partName.equals("DesignDoc")) {
				minNumParts = 1;
				maxNumParts = 1;
			} else if (partName.equals("Proj")) {
				minNumParts = 1;
				maxNumParts = 1;
			} else if (partName.equals("AssociatedRequirementsDoc")) {
				minNumParts = 1;
				maxNumParts = 1;
			} else if (partName.equals("DesignEnvironment")) {
				minNumParts = 0;
				maxNumParts = 999999;
			} else if (partName.equals("AssociatedCodeDoc")) {
				minNumParts = 1;
				maxNumParts = 1;
			}
		} else if (action instanceof ReviewDesignAction) {
			if (partName.equals("Emp")) {
				minNumParts = 1;
				maxNumParts = 999999;
			} else if (partName.equals("DesignDoc")) {
				minNumParts = 1;
				maxNumParts = 1;
			} else if (partName.equals("Proj")) {
				minNumParts = 1;
				maxNumParts = 1;
			} else if (partName.equals("AssociatedRequirementsDoc")) {
				minNumParts = 1;
				maxNumParts = 1;
			}
		} else if (action instanceof CorrectDesignAction) {
			if (partName.equals("Emp")) {
				minNumParts = 1;
				maxNumParts = 999999;
			} else if (partName.equals("DesignDoc")) {
				minNumParts = 1;
				maxNumParts = 1;
			} else if (partName.equals("Proj")) {
				minNumParts = 1;
				maxNumParts = 1;
			} else if (partName.equals("AssociatedRequirementsDoc")) {
				minNumParts = 1;
				maxNumParts = 1;
			} else if (partName.equals("DesignEnvironment")) {
				minNumParts = 0;
				maxNumParts = 999999;
			}
		} else if (action instanceof CreateCodeAction) {
			if (partName.equals("Emp")) {
				minNumParts = 1;
				maxNumParts = 999999;
			} else if (partName.equals("CodeDoc")) {
				minNumParts = 1;
				maxNumParts = 1;
			} else if (partName.equals("Proj")) {
				minNumParts = 1;
				maxNumParts = 1;
			} else if (partName.equals("AssociatedRequirementsDoc")) {
				minNumParts = 1;
				maxNumParts = 1;
			} else if (partName.equals("AssociatedDesignDocument")) {
				minNumParts = 1;
				maxNumParts = 1;
			} else if (partName.equals("DevelopmentEnvironment")) {
				minNumParts = 0;
				maxNumParts = 999999;
			} else if (partName.equals("AssociatedSystemTestPlan")) {
				minNumParts = 1;
				maxNumParts = 1;
			}
		} else if (action instanceof InspectCodeAction) {
			if (partName.equals("Emp")) {
				minNumParts = 3;
				maxNumParts = 999999;
			} else if (partName.equals("CodeDoc")) {
				minNumParts = 1;
				maxNumParts = 1;
			} else if (partName.equals("Proj")) {
				minNumParts = 1;
				maxNumParts = 1;
			} else if (partName.equals("AssociatedRequirementsDoc")) {
				minNumParts = 1;
				maxNumParts = 1;
			} else if (partName.equals("AssociatedDesignDoc")) {
				minNumParts = 1;
				maxNumParts = 1;
			}
		} else if (action instanceof CorrectCodeAction) {
			if (partName.equals("Emp")) {
				minNumParts = 1;
				maxNumParts = 999999;
			} else if (partName.equals("CodeDoc")) {
				minNumParts = 1;
				maxNumParts = 1;
			} else if (partName.equals("Proj")) {
				minNumParts = 1;
				maxNumParts = 1;
			} else if (partName.equals("AssociatedRequirementsDoc")) {
				minNumParts = 1;
				maxNumParts = 1;
			} else if (partName.equals("AssociatedDesignDoc")) {
				minNumParts = 1;
				maxNumParts = 1;
			} else if (partName.equals("DevelopmentEnvironment")) {
				minNumParts = 0;
				maxNumParts = 999999;
			}
		} else if (action instanceof IntegrateCodeAction) {
			if (partName.equals("Emp")) {
				minNumParts = 1;
				maxNumParts = 999999;
			} else if (partName.equals("CodeDoc")) {
				minNumParts = 1;
				maxNumParts = 1;
			} else if (partName.equals("Proj")) {
				minNumParts = 1;
				maxNumParts = 1;
			} else if (partName.equals("AssociatedRequirementsDoc")) {
				minNumParts = 1;
				maxNumParts = 1;
			} else if (partName.equals("AssociatedDesignDoc")) {
				minNumParts = 1;
				maxNumParts = 1;
			} else if (partName.equals("DevelopmentEnvironment")) {
				minNumParts = 0;
				maxNumParts = 999999;
			}
		} else if (action instanceof SystemTestAction) {
			if (partName.equals("CodeDoc")) {
				minNumParts = 1;
				maxNumParts = 1;
			} else if (partName.equals("Proj")) {
				minNumParts = 1;
				maxNumParts = 1;
			} else if (partName.equals("Emp")) {
				minNumParts = 1;
				maxNumParts = 999999;
			} else if (partName.equals("AssociatedSystemTestPlan")) {
				minNumParts = 1;
				maxNumParts = 1;
			} else if (partName.equals("TestingTool")) {
				minNumParts = 0;
				maxNumParts = 999999;
			}
		} else if (action instanceof CreateSystemTestPlanAction) {
			if (partName.equals("Emp")) {
				minNumParts = 1;
				maxNumParts = 999999;
			} else if (partName.equals("AssociatedCodeDoc")) {
				minNumParts = 1;
				maxNumParts = 1;
			} else if (partName.equals("Proj")) {
				minNumParts = 1;
				maxNumParts = 1;
			} else if (partName.equals("SystemTestPlanDoc")) {
				minNumParts = 1;
				maxNumParts = 1;
			} else if (partName.equals("AssociatedRequirementsDoc")) {
				minNumParts = 1;
				maxNumParts = 1;
			} else if (partName.equals("TestingTool")) {
				minNumParts = 0;
				maxNumParts = 999999;
			}
		} else if (action instanceof ReviewSystemTestPlanAction) {
			if (partName.equals("Emp")) {
				minNumParts = 1;
				maxNumParts = 999999;
			} else if (partName.equals("TestPlan")) {
				minNumParts = 1;
				maxNumParts = 1;
			} else if (partName.equals("AssociatedRequirementsDoc")) {
				minNumParts = 1;
				maxNumParts = 1;
			} else if (partName.equals("Proj")) {
				minNumParts = 1;
				maxNumParts = 1;
			}
		} else if (action instanceof CorrectSystemTestPlanAction) {
			if (partName.equals("Emp")) {
				minNumParts = 1;
				maxNumParts = 999999;
			} else if (partName.equals("TestPlan")) {
				minNumParts = 1;
				maxNumParts = 1;
			} else if (partName.equals("AssociatedRequirementsDoc")) {
				minNumParts = 1;
				maxNumParts = 1;
			} else if (partName.equals("Proj")) {
				minNumParts = 1;
				maxNumParts = 1;
			} else if (partName.equals("TestingTool")) {
				minNumParts = 0;
				maxNumParts = 999999;
			}
		} else if (action instanceof DeliverProductAction) {
			if (partName.equals("Emp")) {
				minNumParts = 1;
				maxNumParts = 1;
			} else if (partName.equals("Proj")) {
				minNumParts = 1;
				maxNumParts = 1;
			} else if (partName.equals("CodeDoc")) {
				minNumParts = 1;
				maxNumParts = 1;
			} else if (partName.equals("Cust")) {
				minNumParts = 1;
				maxNumParts = 1;
			}
		} else if (action instanceof BreakAction) {
			if (partName.equals("Breaker")) {
				minNumParts = 1;
				maxNumParts = 1;
			}
		} else if (action instanceof GetSickAction) {
			if (partName.equals("SickPerson")) {
				minNumParts = 1;
				maxNumParts = 1;
			}
		} else if (action instanceof QuitAction) {
			if (partName.equals("Quitter")) {
				minNumParts = 1;
				maxNumParts = 1;
			}
		} else if (action instanceof IntroduceNewRequirementsAction) {
			if (partName.equals("Cust")) {
				minNumParts = 1;
				maxNumParts = 1;
			} else if (partName.equals("AssociatedRequirementsDocument")) {
				minNumParts = 1;
				maxNumParts = 1;
			} else if (partName.equals("Proj")) {
				minNumParts = 1;
				maxNumParts = 1;
			} else if (partName.equals("EmpWOverheadText")) {
				minNumParts = 1;
				maxNumParts = 999999;
			} else if (partName.equals("AssociatedCode")) {
				minNumParts = 1;
				maxNumParts = 1;
			} else if (partName.equals("AssociatedDesignDocument")) {
				minNumParts = 1;
				maxNumParts = 1;
			} else if (partName.equals("AssociatedSystemTestPlan")) {
				minNumParts = 1;
				maxNumParts = 1;
			}
		} else if (action instanceof UpdateProjectAttributesAction) {
			if (partName.equals("Proj")) {
				minNumParts = 1;
				maxNumParts = 1;
			} else if (partName.equals("Emp")) {
				minNumParts = 1;
				maxNumParts = 999999;
			}
		} else if (action instanceof ChangePayRateAction) {
			if (partName.equals("Emp")) {
				minNumParts = 1;
				maxNumParts = 1;
			}
		} else if (action instanceof GiveBonusAction) {
			if (partName.equals("Emp")) {
				minNumParts = 1;
				maxNumParts = 1;
			} else if (partName.equals("ProjectWithBudget")) {
				minNumParts = 1;
				maxNumParts = 1;
			}
		} else if (action instanceof FireAction) {
			if (partName.equals("FiredPerson")) {
				minNumParts = 1;
				maxNumParts = 1;
			}
		} else if (action instanceof PurchaseToolAction) {
			if (partName.equals("EmpWhoseMenuClickedOn")) {
				minNumParts = 1;
				maxNumParts = 1;
			} else if (partName.equals("SETool")) {
				minNumParts = 1;
				maxNumParts = 999999;
			} else if (partName.equals("Proj")) {
				minNumParts = 1;
				maxNumParts = 1;
			}
		} else if (action instanceof SuggestedRequirementsPhaseDurationAction) {
			if (partName.equals("Proj")) {
				minNumParts = 1;
				maxNumParts = 1;
			} else if (partName.equals("Emp")) {
				minNumParts = 1;
				maxNumParts = 999999;
			}
		} else if (action instanceof SuggestedDesignPhaseDurationAction) {
			if (partName.equals("Proj")) {
				minNumParts = 1;
				maxNumParts = 1;
			} else if (partName.equals("Emp")) {
				minNumParts = 1;
				maxNumParts = 999999;
			}
		} else if (action instanceof SuggestedImplIntegrationPhaseDurationAction) {
			if (partName.equals("Proj")) {
				minNumParts = 1;
				maxNumParts = 1;
			} else if (partName.equals("Emp")) {
				minNumParts = 1;
				maxNumParts = 999999;
			}
		} else if (action instanceof SuggestedTestingPhaseDurationAction) {
			if (partName.equals("Proj")) {
				minNumParts = 1;
				maxNumParts = 1;
			} else if (partName.equals("Emp")) {
				minNumParts = 1;
				maxNumParts = 999999;
			}
		}
	}

	public boolean actionCancelled() {
		return actionCancelled;
	}

	public class ExitListener implements EventHandler<WindowEvent> {
		@Override
		public void handle(WindowEvent evt) {
			if (!dialogAccepted) {
				actionCancelled = true;
			}
			close();
		}
	}
}
