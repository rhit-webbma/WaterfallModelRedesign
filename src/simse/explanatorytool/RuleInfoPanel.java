/* File generated by: simse.codegenerator.explanatorytoolgenerator.RuleInfoPanelGenerator */
package simse.explanatorytool;

import javafx.event.EventHandler;
import javafx.scene.control.ListView;
import javafx.scene.control.ScrollPane;
import javafx.scene.control.ScrollPane.ScrollBarPolicy;
import javafx.scene.control.SelectionMode;
import javafx.scene.control.TextArea;
import javafx.scene.control.TitledPane;
import javafx.scene.control.Tooltip;
import javafx.scene.input.MouseEvent;
import javafx.scene.layout.Pane;
import javafx.scene.layout.VBox;
import javafx.stage.Stage;
import simse.adts.actions.Action;
import simse.util.RuleCategories;

public class RuleInfoPanel extends Pane implements EventHandler<MouseEvent> {
	private Action action; // action in focus

	private ListView<String> triggerRuleList;
	private ListView<String> destroyerRuleList;
	private ListView<String> intermediateRuleList;
	private TextArea descriptionArea; // for displaying a rule description

	public RuleInfoPanel(Stage owner, Action action) {
		this.action = action;

		// Create main panel:
		Pane mainPane = new Pane();
		mainPane.setPrefSize(900, 550);

		// Create rule pane and components:
		VBox rulePane = new VBox();
		TitledPane trigRuleTitlePane = new TitledPane("Trigger Rules:", rulePane);

		// rule lists:
		triggerRuleList = new ListView<String>();
		triggerRuleList.setFixedCellSize(7);
		triggerRuleList.getSelectionModel().setSelectionMode(SelectionMode.SINGLE);
		triggerRuleList.addEventHandler(MouseEvent.MOUSE_CLICKED, this);
		ScrollPane triggerRuleListPane = new ScrollPane(triggerRuleList);
		String trigToolTip = "Rules that execute at the beginning of the action";
		trigRuleTitlePane.setTooltip(new Tooltip(trigToolTip));
		triggerRuleList.setTooltip(new Tooltip(trigToolTip));
		rulePane.getChildren().add(triggerRuleListPane);

		TitledPane destRuleTitlePane = new TitledPane("Destroyer Rules: ", rulePane);
		destroyerRuleList = new ListView<String>();
		destroyerRuleList.setFixedCellSize(7);
		destroyerRuleList.getSelectionModel().setSelectionMode(SelectionMode.SINGLE);
		destroyerRuleList.addEventHandler(MouseEvent.MOUSE_CLICKED, this);
		ScrollPane destroyerRuleListPane = new ScrollPane(destroyerRuleList);
		String destToolTip = "Rules that execute at the end of the action";
		destRuleTitlePane.setTooltip(new Tooltip(destToolTip));
		destroyerRuleList.setTooltip(new Tooltip(destToolTip));
		rulePane.getChildren().add(destroyerRuleListPane);

		TitledPane intRuleTitlePane = new TitledPane("Intermediate Rules:", rulePane);
		intermediateRuleList = new ListView<String>();
		intermediateRuleList.setFixedCellSize(7);
		intermediateRuleList.getSelectionModel().setSelectionMode(SelectionMode.SINGLE);
		intermediateRuleList.addEventHandler(MouseEvent.MOUSE_CLICKED, this);
		ScrollPane intermediateRuleListPane = new ScrollPane(intermediateRuleList);
		String intToolTip = "Rules that execute every clock tick during the life of the action";
		intRuleTitlePane.setTooltip(new Tooltip(intToolTip));
		intermediateRuleList.setTooltip(new Tooltip(intToolTip));
		rulePane.getChildren().add(intermediateRuleListPane);

		initializeRuleLists();

		// description pane:
		VBox descriptionPane = new VBox();
		TitledPane descriptionTitlePane = new TitledPane("Description:", descriptionPane);

		// description text area:
		descriptionArea = new TextArea();
		descriptionArea.setPrefColumnCount(29);
		descriptionArea.setPrefRowCount(30);
		descriptionArea.setWrapText(true);
		descriptionArea.setEditable(false);
		ScrollPane descriptionScrollPane = new ScrollPane(descriptionArea);
		descriptionScrollPane.setHbarPolicy(ScrollBarPolicy.NEVER);
		descriptionScrollPane.setVbarPolicy(ScrollBarPolicy.AS_NEEDED);
		descriptionPane.getChildren().add(descriptionScrollPane);

		rulePane.getChildren().add(descriptionPane);

		// Add panes to main pane:
		mainPane.getChildren().add(rulePane);
		mainPane.getChildren().add(descriptionPane);
		this.getChildren().add(mainPane);
	}

	private void initializeRuleLists() {
		String actionName = action.getActionName();
		
		String[] intList = RuleCategories.getIntRulesForAction(actionName);
		String[] trigList = RuleCategories.getTrigRulesForAction(actionName);
		String[] destList = RuleCategories.getDestRulesForAction(actionName);
		
		intermediateRuleList.getItems().setAll(intList);
		triggerRuleList.getItems().setAll(trigList);
		destroyerRuleList.getItems().setAll(destList);
	}

	// refreshes the description area with the selected rule description
	private void refreshDescriptionArea() {
		String name = null;
		if (!triggerRuleList.getSelectionModel().isEmpty()) {
			name = (String) triggerRuleList.getSelectionModel().getSelectedItem();
		} else if (!destroyerRuleList.getSelectionModel().isEmpty()) {
			name = (String) destroyerRuleList.getSelectionModel().getSelectedItem();
		} else if (!intermediateRuleList.getSelectionModel().isEmpty()) {
			name = (String) intermediateRuleList.getSelectionModel().getSelectedItem();
		}
		if (name != null) {
			String text = RuleCategories.getRuleMapping(name);
			descriptionArea.setText(text);
			descriptionArea.positionCaret(0);
		}
	}

	@Override
	public void handle(MouseEvent event) {
		if ((event.getSource() == triggerRuleList && !triggerRuleList.getSelectionModel().isEmpty())) {
			destroyerRuleList.getSelectionModel().clearSelection();
			intermediateRuleList.getSelectionModel().clearSelection();
			refreshDescriptionArea();
		} else if (event.getSource() == destroyerRuleList && !destroyerRuleList.getSelectionModel().isEmpty()) {
			triggerRuleList.getSelectionModel().clearSelection();
			intermediateRuleList.getSelectionModel().clearSelection();
			refreshDescriptionArea();
		} else if (event.getSource() == intermediateRuleList && !intermediateRuleList.getSelectionModel().isEmpty()) {
			triggerRuleList.getSelectionModel().clearSelection();
			destroyerRuleList.getSelectionModel().clearSelection();
			refreshDescriptionArea();
		}
	}
}