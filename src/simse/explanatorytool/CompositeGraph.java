/* File generated by: simse.codegenerator.explanatorytoolgenerator.CompositeGraphGenerator */
package simse.explanatorytool;

import java.util.ArrayList;
import java.util.Optional;

import org.jfree.chart.ChartRenderingInfo;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.axis.NumberAxis;
import org.jfree.chart.fx.ChartViewer;
import org.jfree.chart.fx.interaction.ChartMouseEventFX;
import org.jfree.chart.fx.interaction.ChartMouseListenerFX;
import org.jfree.chart.plot.CombinedDomainXYPlot;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.chart.plot.XYPlot;
import org.jfree.chart.title.TextTitle;
import org.jfree.chart.ui.RectangleEdge;
import org.jfree.data.Range;

import javafx.event.ActionEvent;
import javafx.event.EventHandler;
import javafx.scene.Scene;
import javafx.scene.control.MenuItem;
import javafx.scene.control.SeparatorMenuItem;
import javafx.scene.control.TextInputDialog;
import javafx.scene.input.MouseButton;
import javafx.scene.input.MouseEvent;
import javafx.scene.paint.Color;
import javafx.stage.Stage;
import simse.SimSE;
import simse.gui.util.JavaFXHelpers;
import simse.state.Clock;
import simse.state.State;
import simse.state.logger.Logger;

public class CompositeGraph extends Stage implements ChartMouseListenerFX {
	private ActionGraph actGraph;
	private ObjectGraph objGraph;
	private JFreeChart chart;
	private ChartViewer chartViewer;
	private int lastRightClickedX;
	private MenuItem newBranchItem;
	private SeparatorMenuItem separator;
	private Branch branch; // branch from which this graph is generated
	
	private EventHandler<ActionEvent> menuEvent = new EventHandler<ActionEvent>() {
        private String newBranchName = null;
		
		public void handle(ActionEvent event) {
        	Object source = event.getSource();
        	if (source == newBranchItem) {
        		TextInputDialog td = new TextInputDialog();
    			td.setTitle("Name New Branch");
    			td.setContentText("Please name this new game:");
    			td.setHeaderText(null);
    			Optional<String> result = td.showAndWait();
    			result.ifPresent(name -> {
    				this.newBranchName = name;
    			});
    			if (newBranchName != null) {
    				State tempState = (State) objGraph.getLog().get(lastRightClickedX).clone();
    				Logger tempLogger = new Logger(tempState, new ArrayList<State>(objGraph.getLog().subList(0, 
    						lastRightClickedX)));
    				Clock tempClock = new Clock(tempLogger, lastRightClickedX);
    				tempState.setClock(tempClock);
    				tempState.setLogger(tempLogger);
    				SimSE.startNewBranch(tempState, new Branch(newBranchName, lastRightClickedX, tempClock.getTime(), 
    						branch, null));
    			}
    		}
        }
    };

	public CompositeGraph(ObjectGraph objGraph, ActionGraph actGraph, Branch branch) {
		super();
		this.branch = branch;
		String title = "Composite Graph";
		if (branch.getName() != null) {
			title = title.concat(" - " + branch.getName());
		}
		setTitle(title);

		this.actGraph = actGraph;
		this.objGraph = objGraph;
		lastRightClickedX = 1;
		newBranchItem = new MenuItem("Start new branch from here");
		newBranchItem.setOnAction(menuEvent);
		separator = new SeparatorMenuItem();

		// parent plot:
		NumberAxis domainAxis = new NumberAxis("Clock Ticks");
		domainAxis.setStandardTickUnits(NumberAxis.createIntegerTickUnits());
		CombinedDomainXYPlot plot = new CombinedDomainXYPlot(domainAxis);

		// add the subplots:
		plot.add(this.objGraph.getXYPlot(), 1);
		plot.add(this.actGraph.getXYPlot(), 1);
		plot.setOrientation(PlotOrientation.VERTICAL);

		// make a new chart containing the overlaid plot:
		chart = new JFreeChart("Composite (Object/Action) Graph", JFreeChart.DEFAULT_TITLE_FONT, plot, true);
		TextTitle subtitle = new TextTitle(objGraph.getChartTitle() + " and Selected Actions");
		chart.addSubtitle(subtitle);
		chartViewer = new ChartViewer(chart);
		chartViewer.backgroundProperty().set(JavaFXHelpers.createBackgroundColor(Color.WHITE));
		chartViewer.addChartMouseListener(this);
		
		setScene(new Scene(chartViewer));
		show(); 
	}

	public void update() {
		actGraph.update();
		objGraph.update();
	}

	@Override
	public void chartMouseClicked(ChartMouseEventFX me) {
		MouseEvent event = me.getTrigger();
		if (event.getButton() != MouseButton.PRIMARY) {
			XYPlot plot = chart.getXYPlot();
			Range domainRange = plot.getDataRange(plot.getDomainAxis());
			if (domainRange != null) { // chart is not blank\
				javafx.geometry.Point2D pt = chartViewer.localToScreen(event.getScreenX(), event.getScreenY());
				ChartRenderingInfo info = this.chartViewer.getRenderingInfo();
				java.awt.geom.Rectangle2D dataArea = info.getPlotInfo().getDataArea();
				NumberAxis domainAxis = (NumberAxis) plot.getDomainAxis();
				RectangleEdge domainAxisEdge = plot.getDomainAxisEdge();
				double chartX = domainAxis.java2DToValue(pt.getX(), dataArea, domainAxisEdge);
				lastRightClickedX = (int) Math.rint(chartX);
				if (domainRange != null
						&& lastRightClickedX >= domainRange.getLowerBound()
						&& lastRightClickedX <= domainRange.getUpperBound()) { // clicked
																				// within
																				// domain
																				// range
					if ((chartViewer).getContextMenu().getItems().indexOf(
							newBranchItem) == -1) { // no new branch item on
													// menu currently
						chartViewer.getContextMenu().getItems().add(separator);
						chartViewer.getContextMenu().getItems().add(newBranchItem);
					}
				} else { // clicked outside of domain range
					if (chartViewer.getContextMenu().getItems().indexOf(newBranchItem) >= 0) { // new branch item currently
													// on menu
						chartViewer.getContextMenu().getItems().remove(newBranchItem);
						if (chartViewer.getContextMenu().getItems().indexOf(
								separator) >= 0) { // has separator
							chartViewer.getContextMenu().getItems().remove(separator);
						}
					}
				}
			}
		} else {
			actGraph.chartMouseClicked(me);	
		}
	}

	@Override
	public void chartMouseMoved(ChartMouseEventFX me) {
	}
}