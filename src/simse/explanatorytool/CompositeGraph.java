/* File generated by: simse.codegenerator.explanatorytoolgenerator.CompositeGraphGenerator */
package simse.explanatorytool;

import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartMouseEvent;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.ChartRenderingInfo;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.axis.NumberAxis;
import org.jfree.chart.fx.ChartViewer;
import org.jfree.chart.plot.CombinedDomainXYPlot;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.chart.plot.XYPlot;
import org.jfree.chart.renderer.xy.XYLineAndShapeRenderer;
import org.jfree.chart.title.TextTitle;
import org.jfree.data.Range;
import org.jfree.data.xy.XYDataset;
import org.jfree.data.xy.XYSeries;
import org.jfree.data.xy.XYSeriesCollection;
import org.jfree.chart.ui.RectangleEdge;
import org.jfree.chart.ui.RectangleInsets;
import org.jfree.ui.RefineryUtilities;

import javafx.event.EventHandler;
import javafx.scene.Scene;
import javafx.scene.control.Dialog;
import javafx.scene.control.MenuItem;
import javafx.scene.control.Separator;
import javafx.scene.control.SeparatorMenuItem;
import javafx.scene.input.MouseButton;
import javafx.scene.input.MouseEvent;
import javafx.stage.Stage;
import javafx.stage.WindowEvent;
import simse.SimSE;
import simse.state.Clock;
import simse.state.State;
import simse.state.logger.Logger;

import java.awt.Color;
import java.awt.Point;
import java.awt.geom.Point2D;
import java.awt.geom.Rectangle2D;
import java.awt.Font;
import java.util.ArrayList;

public class CompositeGraph extends Stage implements EventHandler<MouseEvent> {
	private ActionGraph actGraph;
	private ObjectGraph objGraph;
	private JFreeChart chart;
	private ChartViewer chartViewer;
	private int lastRightClickedX;
	private MenuItem newBranchItem;
	private SeparatorMenuItem separator;
	private Branch branch; // branch from which this graph is generated

	public CompositeGraph(ObjectGraph objGraph, ActionGraph actGraph,
			Branch branch) {
		super();
		this.branch = branch;
		String title = "Composite Graph";
		if (branch.getName() != null) {
			title = title.concat(" - " + branch.getName());
		}
		setTitle(title);

		this.actGraph = actGraph;
		this.objGraph = objGraph;
		lastRightClickedX = 1;
		newBranchItem = new MenuItem("Start new branch from here");
		newBranchItem.addEventHandler(MouseEvent.MOUSE_CLICKED, this);
//		newBranchItem.addActionListener(this);
		separator = new SeparatorMenuItem();

		// parent plot:
		NumberAxis domainAxis = new NumberAxis("Clock Ticks");
		domainAxis.setStandardTickUnits(NumberAxis.createIntegerTickUnits());
		CombinedDomainXYPlot plot = new CombinedDomainXYPlot(domainAxis);

		// add the subplots:
		plot.add(objGraph.getXYPlot(), 1);
		plot.add(actGraph.getXYPlot(), 1);
		plot.setOrientation(PlotOrientation.VERTICAL);

		// make a new chart containing the overlaid plot:
		chart = new JFreeChart("Composite (Object/Action) Graph",
				JFreeChart.DEFAULT_TITLE_FONT, plot, true);
		TextTitle subtitle = new TextTitle(objGraph.getChartTitle()
				+ " and Selected Actions", new Font("SansSerif", Font.BOLD, 12));
		chart.addSubtitle(subtitle);
		chart.setBackgroundPaint(Color.white);
		chartViewer = new ChartViewer(chart);
//		chartPanel = new ChartPanel(chart, true, true, true, true, true);
//		chartPanel.addChartMouseListener(this);
//		chartPanel.addMouseListener(this);
//		chartPanel.setPreferredSize(new java.awt.Dimension(1000, 540));
		
		
//		setContentPane(chartPanel);
//		pack();
//		RefineryUtilities.centerFrameOnScreen(this);
//		setVisible(true);
		
		setScene(new Scene(chartViewer));
		show(); 
	}

	// responds to LEFT mouse clicks on the chart
	public void chartMouseClicked(ChartMouseEvent event) {
		// send the event to the action graph:
		actGraph.chartMouseClicked(event);
	}

	public void chartMouseMoved(ChartMouseEvent event) {
	}

	// responds to RIGHT-clicks on the chart
	public void mouseReleased(MouseEvent me) {
		if (me.getButton() != MouseButton.PRIMARY) { // not left-click
			XYPlot plot = chart.getXYPlot();
			Range domainRange = plot.getDataRange(plot.getDomainAxis());
			if (domainRange != null) { // chart is not blank\
				javafx.geometry.Point2D pt = chartViewer.localToScreen(me.getScreenX(), me.getScreenY());
				ChartRenderingInfo info = this.chartViewer
						.getRenderingInfo();
				Rectangle2D dataArea = info.getPlotInfo().getDataArea();
				NumberAxis domainAxis = (NumberAxis) plot.getDomainAxis();
				org.jfree.chart.ui.RectangleEdge domainAxisEdge = plot.getDomainAxisEdge();
				double chartX = domainAxis.java2DToValue(pt.getX(), dataArea,
						domainAxisEdge);
				lastRightClickedX = (int) Math.rint(chartX);
				if (domainRange != null
						&& lastRightClickedX >= domainRange.getLowerBound()
						&& lastRightClickedX <= domainRange.getUpperBound()) { // clicked
																				// within
																				// domain
																				// range
					if ((chartViewer).getContextMenu().getItems().indexOf(
							newBranchItem) == -1) { // no new branch item on
													// menu currently
						chartViewer.getContextMenu().getItems().add(separator);
						chartViewer.getContextMenu().getItems().add(newBranchItem);
//						chartViewer.getPopupMenu().pack();
//						chartViewer.getPopupMenu().repaint();
					}
				} else { // clicked outside of domain range
					if (chartViewer.getContextMenu().getItems().indexOf(
							newBranchItem) >= 0) { // new branch item currently
													// on menu
						chartViewer.getContextMenu().getItems().remove(newBranchItem);
						if (chartViewer.getContextMenu().getItems().indexOf(
								separator) >= 0) { // has separator
							chartViewer.getContextMenu().getItems().remove(separator);
						}
//						chartViewer.getPopupMenu().pack();
//						chartViewer.getPopupMenu().repaint();
					}
				}
			}
		}
	}

//	public void mousePressed(MouseEvent me) {
//	}
//
//	public void mouseClicked(MouseEvent me) {
//	}
//
//	public void mouseEntered(MouseEvent me) {
//	}
//
//	public void mouseExited(MouseEvent me) {
//	}

//	public void actionPerformed(ActionEvent e) {
//		if (e.getSource() == newBranchItem) {
//			String newBranchName = JOptionPane.showInputDialog(null,
//					"Please name this new game:", "Name New Game",
//					JOptionPane.QUESTION_MESSAGE);
//			if (newBranchName != null) {
//				State tempState = (State) objGraph.getLog()
//						.get(lastRightClickedX).clone();
//				Logger tempLogger = new Logger(tempState, new ArrayList<State>(
//						objGraph.getLog().subList(0, lastRightClickedX)));
//				Clock tempClock = new Clock(tempLogger, lastRightClickedX);
//				tempState.setClock(tempClock);
//				tempState.setLogger(tempLogger);
//				SimSE.startNewBranch(tempState, new Branch(newBranchName,
//						lastRightClickedX, tempClock.getTime(), branch, null));
//			}
//		}
//	}
	
	@Override
	public void handle(MouseEvent me) {
		if (me.getSource() == newBranchItem) {
			Dialog<String> dialog = new Dialog<>();
			dialog.setTitle("Name New Game");
			dialog.setContentText("Please name this new game:");
			dialog.showAndWait();
			String newBranchName = dialog.getResult();
//			String newBranchName = JOptionPane.showInputDialog(null,
//					"Please name this new game:", "Name New Game",
//					JOptionPane.QUESTION_MESSAGE);
			if (newBranchName != null) {
				State tempState = (State) objGraph.getLog()
						.get(lastRightClickedX).clone();
				Logger tempLogger = new Logger(tempState, new ArrayList<State>(
						objGraph.getLog().subList(0, lastRightClickedX)));
				Clock tempClock = new Clock(tempLogger, lastRightClickedX);
				tempState.setClock(tempClock);
				tempState.setLogger(tempLogger);
				SimSE.startNewBranch(tempState, new Branch(newBranchName,
						lastRightClickedX, tempClock.getTime(), branch, null));
			}
		} else {
			if (me.getButton() != MouseButton.PRIMARY) { // not left-click
				XYPlot plot = chart.getXYPlot();
				Range domainRange = plot.getDataRange(plot.getDomainAxis());
				if (domainRange != null) { // chart is not blank\
					javafx.geometry.Point2D pt = chartViewer.localToScreen(me.getScreenX(), me.getScreenY());
					ChartRenderingInfo info = this.chartViewer
							.getRenderingInfo();
					Rectangle2D dataArea = info.getPlotInfo().getDataArea();
					NumberAxis domainAxis = (NumberAxis) plot.getDomainAxis();
					org.jfree.chart.ui.RectangleEdge domainAxisEdge = plot.getDomainAxisEdge();
					double chartX = domainAxis.java2DToValue(pt.getX(), dataArea,
							domainAxisEdge);
					lastRightClickedX = (int) Math.rint(chartX);
					if (domainRange != null
							&& lastRightClickedX >= domainRange.getLowerBound()
							&& lastRightClickedX <= domainRange.getUpperBound()) { // clicked
																					// within
																					// domain
																					// range
						if ((chartViewer).getContextMenu().getItems().indexOf(
								newBranchItem) == -1) { // no new branch item on
														// menu currently
							chartViewer.getContextMenu().getItems().add(separator);
							chartViewer.getContextMenu().getItems().add(newBranchItem);
//							chartViewer.getPopupMenu().pack();
//							chartViewer.getPopupMenu().repaint();
						}
					} else { // clicked outside of domain range
						if (chartViewer.getContextMenu().getItems().indexOf(
								newBranchItem) >= 0) { // new branch item currently
														// on menu
							chartViewer.getContextMenu().getItems().remove(newBranchItem);
							if (chartViewer.getContextMenu().getItems().indexOf(
									separator) >= 0) { // has separator
								chartViewer.getContextMenu().getItems().remove(separator);
							}
//							chartViewer.getPopupMenu().pack();
//							chartViewer.getPopupMenu().repaint();
						}
					}
				}
			} else {
				actGraph.chartMouseClicked(me);
			}
		}
	}

	public void update() {
		actGraph.update();
		objGraph.update();
	}

//	public class ExitListener extends WindowAdapter {
//		public void windowClosing(WindowEvent event) {
//			hide();
////			setVisible(false);
////			dispose();
//		}
//	}

}