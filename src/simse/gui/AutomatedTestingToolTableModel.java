/* File generated by: simse.codegenerator.guigenerator.AtAGlanceTableModelGenerator */
package simse.gui;

import java.util.Vector;

import simse.adts.objects.AutomatedTestingTool;
import simse.state.State;

public class AutomatedTestingToolTableModel extends TableModel<AutomatedTestingTool>{
	public AutomatedTestingToolTableModel(State s) {
		super(s);
	}


	@Override
	public Object getValueAt(int row, int col) {
		AutomatedTestingTool model = super.getData().elementAt(col);
		Object returnValue = "";
		switch(row) {
		case 0: returnValue =  model.getName();
		break;
		case 1: returnValue = model.getCost();
		break;
		case 2: returnValue = model.getPurchased();
		break;
		}
		return returnValue;
	}
	
	@Override
	public void setValueAt(Object value, int row, int col) {
		AutomatedTestingTool model = super.getData().elementAt(col);
		switch(row) {
		case 0: model.setName((String) value);
		break;
		case 1: model.setCost((double) value);
		break;
		case 2: model.setPurchased((boolean) value);
		break;
		}
		fireTableCellUpdated(row, col);
	}

	@Override 
	void initColNames() {
		super.addColumnName("Name");
		super.addColumnName("Cost");
		super.addColumnName("Purchased");
	}

//	@Override
//	public void update() {
//
//		if (!super.getState().getClock().isStopped()) {
//			Vector<AutomatedTestingTool> automatedtestingtools = super.getState()
//					.getToolStateRepository()
//					.getAutomatedTestingToolStateRepository().getAll();
//			Vector<String> names = new Vector<String>();
//			// Initialize Name:
////			temp = new Vector<Object>();
//			for (int i = 0; i < automatedtestingtools.size(); i++) {
//				names.add(automatedtestingtools.elementAt(i).getName());
//			}
////			if (data.size() < 1) {
////				data.add(temp);
////			} else {
////				data.setElementAt(temp, 0);
////			}
//
//			// Initialize Cost:
//			Vector<Double> costs = new Vector<Double>();
//			for (int i = 0; i < automatedtestingtools.size(); i++) {
//				numFormat.setMinimumFractionDigits(2);
//				numFormat.setMaximumFractionDigits(2);
//				costs.add(automatedtestingtools.elementAt(i)
//						.getCost());
//
//			}
////			if (data.size() < 2) {
////				data.add(temp);
////			} else {
////				data.setElementAt(temp, 1);
////			}
//
//			// Initialize Purchased:
//			Vector<Boolean> purchasedList = new Vector<Boolean>();
//			for (int i = 0; i < automatedtestingtools.size(); i++) {
//				purchasedList.add(new Boolean(automatedtestingtools.elementAt(i)
//						.getPurchased()));
//			}
////			if (data.size() < 3) {
////				data.add(temp);
////			} else {
////				data.setElementAt(temp, 2);
////			}
//			
//			for(int i = 0; i < automatedtestingtools.size(); i++) {
//				AutomatedTestingTool newAutomatedTestTool = new AutomatedTestingTool(names.get(i), costs.get(i), 0.0, 0.0, purchasedList.get(i));
//				data.add(newAutomatedTestTool);
//			}
//
//		} else // game over
//		{
//			data.clear();
//			columnNames.clear();
//			Vector<AutomatedTestingTool> automatedtestingtools = state
//					.getToolStateRepository()
//					.getAutomatedTestingToolStateRepository().getAll();
//			// Initialize Name:
//			if (columnNames.contains("Name") == false) {
//				columnNames.add("Name");
//			}
//			Vector<String> names = new Vector<String>();
//			for (int i = 0; i < automatedtestingtools.size(); i++) {
//				names.add(automatedtestingtools.elementAt(i).getName());
//			}
////			if (data.size() < 1) {
////				data.add(temp);
////			} else {
////				data.setElementAt(temp, 0);
////			}
//
//			// Initialize Cost:
//			if (columnNames.contains("Cost") == false) {
//				columnNames.add("Cost");
//			}
//			Vector<Double> costs = new Vector<Double>();
//			for (int i = 0; i < automatedtestingtools.size(); i++) {
//				numFormat.setMinimumFractionDigits(2);
//				numFormat.setMaximumFractionDigits(2);
//				costs.add(automatedtestingtools.elementAt(i)
//						.getCost());
//			}
////			if (data.size() < 2) {
////				data.add(temp);
////			} else {
////				data.setElementAt(temp, 1);
////			}
//
//			// Initialize ProductivityIncreaseFactor:
//			if (columnNames.contains("ProductivityIncreaseFactor") == false) {
//				columnNames.add("ProductivityIncreaseFactor");
//			}
//			Vector<Double> productivityList = new Vector<Double>();
//			for (int i = 0; i < automatedtestingtools.size(); i++) {
//				numFormat.setMinimumFractionDigits(2);
//				numFormat.setMaximumFractionDigits(2);
//				productivityList.add(automatedtestingtools.elementAt(i)
//						.getProductivityIncreaseFactor());
//			}
////			if (data.size() < 3) {
////				data.add(temp);
////			} else {
////				data.setElementAt(temp, 2);
////			}
//
//			// Initialize ErrorRateDecreaseFactor:
//			if (columnNames.contains("ErrorRateDecreaseFactor") == false) {
//				columnNames.add("ErrorRateDecreaseFactor");
//			}
//			Vector<Double> errorRateList = new Vector<Double>();
//			for (int i = 0; i < automatedtestingtools.size(); i++) {
//				numFormat.setMinimumFractionDigits(2);
//				numFormat.setMaximumFractionDigits(2);
//				errorRateList.add(automatedtestingtools.elementAt(i)
//						.getErrorRateDecreaseFactor());
//			}
////			if (data.size() < 4) {
////				data.add(temp);
////			} else {
////				data.setElementAt(temp, 3);
////			}
//
//			// Initialize Purchased:
//			if (columnNames.contains("Purchased") == false) {
//				columnNames.add("Purchased");
//			}
//			Vector<Boolean> purchasedList = new Vector<Boolean>();
//			for (int i = 0; i < automatedtestingtools.size(); i++) {
//				purchasedList.add(new Boolean(automatedtestingtools.elementAt(i)
//						.getPurchased()));
//			}
////			if (data.size() < 5) {
////				data.add(temp);
////			} else {
////				data.setElementAt(temp, 4);
////			}
//			
//			for(int i = 0; i < automatedtestingtools.size(); i++) {
//				AutomatedTestingTool newAutomatedTestTool = new AutomatedTestingTool(names.get(i), costs.get(i), productivityList.get(i), errorRateList.get(i), purchasedList.get(i));
//				data.add(newAutomatedTestTool);
//			}
//
//			fireTableStructureChanged();
//		}
//
//		fireTableDataChanged(); // notify listeners that table data has changed
//	}


	@Override
	Vector<AutomatedTestingTool> getRepository() {
		// TODO Auto-generated method stub
		return  super.getState()
				.getToolStateRepository()
				.getAutomatedTestingToolStateRepository().getAll();
	}
}
