/* File generated by: simse.codegenerator.guigenerator.WorldGenerator */
package simse.gui;

import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.util.ArrayList;
import java.util.Vector;

import animations.CreatablePath;
import animations.DisplayableCharacter;
import animations.PathData;
import animations.SimSECharacter;
import javafx.event.ActionEvent;
import javafx.event.Event;
import javafx.event.EventHandler;
import javafx.geometry.Bounds;
import javafx.geometry.Insets;
import javafx.geometry.Point2D;
import javafx.geometry.Rectangle2D;
import javafx.scene.canvas.Canvas;
import javafx.scene.canvas.GraphicsContext;
import javafx.scene.control.ContextMenu;
import javafx.scene.control.MenuItem;
import javafx.scene.image.Image;
import javafx.scene.image.ImageView;
import javafx.scene.input.KeyEvent;
import javafx.scene.input.MouseEvent;
import javafx.scene.layout.Background;
import javafx.scene.layout.BackgroundFill;
import javafx.scene.layout.CornerRadii;
import javafx.scene.layout.StackPane;
import javafx.scene.paint.Color;
import javafx.scene.shape.Path;
import javafx.scene.text.Font;
import simse.adts.objects.Employee;
import simse.gui.util.JavaFXHelpers;
import simse.logic.Logic;
import simse.state.State;

//import com.sun.javafx.tk.FontMetrics;
//import com.sun.javafx.tk.Toolkit;

public class World extends SimSEMap implements EventHandler<Event> {
	private int clickedHeightModifier = 5;
	private double clickedX;
	private double clickedY;
	public final int xViewable = 9;
	public final int yViewable = 9;
	
	private final double width = 1180;
	private final double height = 720;
	private final double MOUSE_SPACER_X = 23.6;
	private final double MOUSE_SPACER_Y = 163.3;

	private final SimSEGUI mainGUIFrame;

	// used in drawing the speech bubble:
	public static final int FREE = 0;
	public static final int LEFT = -1;
	public static final int RIGHT = 1;
	public static final int TOP = -1;
	public static final int BOTTOM = 1;

	private boolean overheadTextDisplayed; // whether or not there is overhead
											// text to display

	private ContextMenu popup;
	private PopupListener popupListener;

	private Employee selectedEmployee;

	// how much to shift the map when a resize of the screen occurs:
	private double xspacer;
	private double yspacer;
	private boolean employeeGone = false;
	private Image dbImage;
	private GraphicsContext dbGraphics;

	private EventHandler<ActionEvent> menuItemEvent = new EventHandler<ActionEvent>() {
		public void handle(ActionEvent event) {
			Object source = event.getSource();
			if (source instanceof MenuItem) {
				popupMenuActions((MenuItem) source);
			}
		}
	};

	public World(State s, Logic l, SimSEGUI parent) {
		super(s, l);
		mainGUIFrame = parent;
		overheadTextDisplayed = false;
		
		this.setHeight(height);
		this.setWidth(width);
		
		final Canvas canvas = new Canvas(width, height);
		
		
		dbGraphics = canvas.getGraphicsContext2D();
		
		
		this.getChildren().add(canvas);
		
		xspacer = (width - MapData.X_MAPSIZE * MapData.TILE_SIZE) / 2;
		yspacer = (height - MapData.Y_MAPSIZE * MapData.TILE_SIZE) / 2;

		if (xspacer < 0)
			xspacer = 0;
		if (yspacer < 0)
			yspacer = 0;
		
		ImageView mapView = new ImageView();
		
		FileInputStream inputStream = null;
		try {
			inputStream = new FileInputStream("SimSEMap\\SimSESpriteSheet.png");
		} catch (FileNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		mapView.setImage(new Image(inputStream));
		
		this.getChildren().add(mapView);
		
		Vector<Employee> allEmp = state.getEmployeeStateRepository().getAll();
		
		for (int i = 0; i < allEmp.size(); i++) {
//			DisplayedEmployee tmp = sopUsers.get(i);
//			double[][] pathDirections = PathData.getStartingPath(i);
//			CreatablePath newPath = new CreatablePath(
//					MapData.getStartingMapLocation(i)[0] + 5, 
//					MapData.getStartingMapLocation(i)[1],
//					pathDirections,
//					PathData.getAnimationData(i)[0],
//					PathData.getAnimationData(i)[1]
//					);
			DisplayableCharacter tmpChar = allEmp.get(i).getCharacterModel();
			this.getChildren().add(tmpChar);
			tmpChar.requestFocus();
		}
		


		loadDefaultSettings();
		update();
		paint();
	}

	private void loadDefaultSettings() {
		selectedEmployee = null;
		setBackground(JavaFXHelpers.createBackgroundColor(Color.BLUE));
		addEventHandler(KeyEvent.ANY, this);
		addEventHandler(MouseEvent.ANY, this);
		setVisible(true);

		// right click menu:
		popup = new ContextMenu();
		popupListener = new PopupListener(popup, mainGUIFrame);
		popupListener.setEnabled(false);
		createPopupMenu();
	}

	public boolean overheadTextDisplayed() // returns true if there is overhead
											// text displayed, false otherwise
	{
		return overheadTextDisplayed;
	}

	public void createPopupMenu() {
		popup.getItems().removeAll();

		if (selectedEmployee != null) {
			Vector<String> menuItems = selectedEmployee.getMenu();
			for (int i = 0; i < menuItems.size(); i++) {
				String item = menuItems.elementAt(i);
				MenuItem tempItem = new MenuItem(item);
				tempItem.setOnAction(menuItemEvent);
				popup.getItems().add(tempItem);
			}
		}
		addEventHandler(MouseEvent.ANY, popupListener);
	}

	// double buffering to prevent flickering
	public void update(GraphicsContext gc) {

		// clear screen in background:
		dbGraphics.setFill(Color.BLACK);
		dbGraphics.fillRect(0, 0, width, height);
		
		// draw elements in background:
		paint();
		// draw image on the screen:
		dbGraphics.drawImage(dbImage, 0, 0);

		if (employeeGone) // employee is about to disappear, need to sleep
							// thread so the user can see their overhead text
							// before they disappear
		{
			try {
				Thread.sleep(1000);
				employeeGone = false;
			} catch (InterruptedException e) {
				System.out.println(e.toString());
			}
		}
	}

	public void paint() {
		GraphicsContext gc = dbGraphics;

		// go through all employees and display their overhead text, if any:
		int numOverheadTexts = 0;
		for (int i = 0; i < sopUsers.size(); i++) {
			DisplayedEmployee tempEmp = sopUsers.get(i);
			String overheadText = tempEmp.getEmployee().getOverheadText();
			if ((overheadText != null) && (overheadText.length() > 0)) {
				numOverheadTexts++;
				if (state.getEmployeeStateRepository().getAll().contains(tempEmp.getEmployee()) == false) {
					employeeGone = true;
				}
			}
		}
		if (numOverheadTexts > 0) {
			overheadTextDisplayed = true;
		} else {
			overheadTextDisplayed = false;
		}

		ArrayList<DisplayedEmployee> oldSopUsers = new ArrayList<DisplayedEmployee>(sopUsers);
		sopUsers.clear();

		// go through sop users and make sure that they are still in the state
		// (haven't been destroyed):
		for (int i = 0; i < oldSopUsers.size(); i++) {
			DisplayedEmployee tempDisEmp = oldSopUsers.get(i);
			if (state.getEmployeeStateRepository().getAll().contains(tempDisEmp.getEmployee())) // employee is still
																								// there
			{
				sopUsers.add(tempDisEmp);
			}
		}
		// check if any new emps have been added:
		if (sopUsers.size() < state.getEmployeeStateRepository().getAll().size()) // new emps have been added
		{
			Vector<Employee> allEmps = state.getEmployeeStateRepository().getAll();
			for (int i = 0; i < allEmps.size(); i++) {
				Employee tempEmp = allEmps.elementAt(i);
				boolean newEmp = true;
				for (int j = 0; j < sopUsers.size(); j++) {
					DisplayedEmployee tempDisEmp = sopUsers.get(j);
					if (tempDisEmp.getEmployee().equals(tempEmp)) {
						newEmp = false;
						break;
					}
				}
				if (newEmp) {
					// create new DisplayedEmployee and add to sopUsers:
					DisplayedEmployee newDisEmp = new DisplayedEmployee(tempEmp, getImage(tempEmp), true, true,
							getXYCoordinates(tempEmp)[0], getXYCoordinates(tempEmp)[1]);
					sopUsers.add(newDisEmp);
				}
			}
		}
	}

	public void popupMenuActions(MenuItem source) {
		MenuItem item = (MenuItem) source;
		logic.getMenuInputManager().menuItemSelected(selectedEmployee, item.getText(), mainGUIFrame);
		update();
	}

	public void update() {
		GraphicsContext gc = dbGraphics;
		if (gc != null) {
			update(gc);
		} else {
			paint();
		}
		if (state.getClock().isStopped()) {
			popupListener.setEnabled(false);
		}
	}

	@Override
	public void handle(Event event) {
		if (event.getEventType() == MouseEvent.MOUSE_PRESSED) {
			MouseEvent mEvent = (MouseEvent) event;
			// -5 is the offset for the border around the GUI
//			clickedX = (int) ((mEvent.getX() - xspacer - 5) / MapData.TILE_SIZE);
//			clickedY = (int) ((mEvent.getY() - yspacer - clickedHeightModifier) / MapData.TILE_SIZE);
			
			clickedX = mEvent.getSceneX() - MOUSE_SPACER_X;
			clickedY = mEvent.getSceneY() - MOUSE_SPACER_Y;
			
//	        System.out.println("X: " + (event.getSceneX() - MOUSE_SPACER_X));
//	        System.out.println("Y: " + (event.getSceneY() - MOUSE_SPACER_Y));
			Vector<Employee> allEmp = state.getEmployeeStateRepository().getAll();
			if (mEvent.isPrimaryButtonDown()) // left button clicked
			{
//				for (int i = 0; i < sopUsers.size(); i++) {
//					DisplayedEmployee tmp = sopUsers.get(i);
//					if (tmp.checkXYLocations(clickedX, clickedY) && tmp.isActivated()) {
//						selectedUser = tmp;
//						i = sopUsers.size();
//						mainGUIFrame.getTabPanel().setGUIChanged();
//						mainGUIFrame.getTabPanel().setObjectInFocus(tmp.getEmployee());
//						mainGUIFrame.getAttributePanel().setGUIChanged();
//						mainGUIFrame.getAttributePanel().setObjectInFocus(tmp.getEmployee(), tmp.getUserIcon());
//					}
//				}
				
				for(int i = 0; i < allEmp.size(); i++) {
					DisplayableCharacter empModel = allEmp.get(i).getCharacterModel();
					if(empModel.withinRange(clickedX, clickedY)) {
						selectedEmployee = allEmp.get(i);
						mainGUIFrame.getTabPanel().setGUIChanged();
						mainGUIFrame.getTabPanel().setObjectInFocus(allEmp.get(i));
						mainGUIFrame.getAttributePanel().setGUIChanged();
						mainGUIFrame.getAttributePanel().setObjectInFocus(allEmp.get(i), 
								empModel.getDisplayedCharacter(false).getImage());
					}
				}
			}

			else if (state.getClock().isStopped() == false) // clock not stopped,
															// and not left button
															// click
			{
				boolean found = false;
//				for (int i = 0; i < sopUsers.size(); i++) {
//					DisplayedEmployee tmp = sopUsers.get(i);
//					if (tmp.checkXYLocations(clickedX, clickedY) && tmp.isActivated()) {
//						selectedUser = tmp;
//						popupListener.setEnabled(true);
//						found = true;
//						i = sopUsers.size();
//
//						createPopupMenu();
//					}
//				}
				for(int i = 0; i < allEmp.size(); i++) {
					DisplayableCharacter empModel = allEmp.get(i).getCharacterModel();
					if(empModel.withinRange(clickedX, clickedY)) {
						selectedEmployee = allEmp.get(i);
						popupListener.setEnabled(true);
						found = true;
						createPopupMenu();
					}
				}
				

				// did not click on a User object, disable right click
				if (!found)
					popupListener.setEnabled(false);

				paint();
			}
		}
	}
}