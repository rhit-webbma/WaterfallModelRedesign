/* File generated by: simse.codegenerator.guigenerator.AtAGlanceTableModelGenerator */
package simse.gui;

import javax.swing.table.*;
import java.util.*;
import java.lang.*;
import java.text.*;

import simse.adts.objects.*;
import simse.state.*;

public class DesignDocumentTableModel extends TableModel<DesignDocument> {

	
	
	
	public DesignDocumentTableModel(State s) {
		super(s);
	}

	@Override
	public Object getValueAt(int row, int col) {
		DesignDocument model = data.elementAt(col);
		Object returnValue = null;
		switch(row) {
		case 0: returnValue = model.getName();
		break;
		case 1: returnValue = model.getSize();
		break;
		case 2: returnValue = model.getNumKnownErrors();
		break;
		case 3: returnValue = model.getNumUnknownErrors();
		break;
		case 4: returnValue = model.getPercentErroneous();
		break;
		case 5: returnValue = model.getPercentComplete();
		break;
		case 6: returnValue = model.getNumUnknownTemp();
		break;
		case 7: returnValue = model.getCompletenessDiffReqDoc();
		}
		return returnValue;
	}

	@Override
	public void setValueAt(Object value, int row, int col) {
		DesignDocument model = data.elementAt(col);
		switch(row) {
		case 0: model.setName((String) value);
		break;
		case 1: model.setSize((double) value);
		break;
		case 2: model.setNumKnownErrors((double) value);
		break;
		case 3: model.setNumUnknownErrors((double) value);
		break;
		case 4: model.setPercentErroneous((double) value);
		break;
		case 5: model.setPercentComplete((double) value);
		break;
		case 6: model.setNumUnknownTemp((double) value);
		break;
		case 7: model.setCompletenessDiffReqDoc((int) value);
		}
		fireTableCellUpdated(row, col);
	}
	
	@Override
	void initColNames() {
		columnNames.add("Name");
		columnNames.add("NumKnownErrors");
		columnNames.add("PercentComplete");
	}

//	@Override
//	public void update() {
//
//		if (!state.getClock().isStopped()) {
//			Vector<DesignDocument> designdocuments = state
//					.getArtifactStateRepository()
//					.getDesignDocumentStateRepository().getAll();
//			Vector<Object> temp = new Vector<Object>();
//			// Initialize Name:
//			temp = new Vector<Object>();
//			for (int i = 0; i < designdocuments.size(); i++) {
//				temp.add(designdocuments.elementAt(i).getName());
//			}
//			if (data.size() < 1) {
//				data.add(temp);
//			} else {
//				data.setElementAt(temp, 0);
//			}
//
//			// Initialize NumKnownErrors:
//			temp = new Vector<Object>();
//			for (int i = 0; i < designdocuments.size(); i++) {
//				numFormat.setMinimumFractionDigits(0);
//				numFormat.setMaximumFractionDigits(0);
//				temp.add(numFormat.format(designdocuments.elementAt(i)
//						.getNumKnownErrors()));
//
//			}
//			if (data.size() < 2) {
//				data.add(temp);
//			} else {
//				data.setElementAt(temp, 1);
//			}
//
//			// Initialize PercentComplete:
//			temp = new Vector<Object>();
//			for (int i = 0; i < designdocuments.size(); i++) {
//				numFormat.setMinimumFractionDigits(0);
//				numFormat.setMaximumFractionDigits(0);
//				temp.add(numFormat.format(designdocuments.elementAt(i)
//						.getPercentComplete()));
//
//			}
//			if (data.size() < 3) {
//				data.add(temp);
//			} else {
//				data.setElementAt(temp, 2);
//			}
//
//		} else // game over
//		{
//			data.clear();
//			columnNames.clear();
//			Vector<DesignDocument> designdocuments = state
//					.getArtifactStateRepository()
//					.getDesignDocumentStateRepository().getAll();
//			Vector<Object> temp = new Vector<Object>();
//			// Initialize Name:
//			if (columnNames.contains("Name") == false) {
//				columnNames.add("Name");
//			}
//			temp = new Vector<Object>();
//			for (int i = 0; i < designdocuments.size(); i++) {
//				temp.add(designdocuments.elementAt(i).getName());
//			}
//			if (data.size() < 1) {
//				data.add(temp);
//			} else {
//				data.setElementAt(temp, 0);
//			}
//
//			// Initialize NumKnownErrors:
//			if (columnNames.contains("NumKnownErrors") == false) {
//				columnNames.add("NumKnownErrors");
//			}
//			temp = new Vector<Object>();
//			for (int i = 0; i < designdocuments.size(); i++) {
//				numFormat.setMinimumFractionDigits(0);
//				numFormat.setMaximumFractionDigits(0);
//				temp.add(numFormat.format(designdocuments.elementAt(i)
//						.getNumKnownErrors()));
//			}
//			if (data.size() < 2) {
//				data.add(temp);
//			} else {
//				data.setElementAt(temp, 1);
//			}
//
//			// Initialize NumUnknownErrors:
//			if (columnNames.contains("NumUnknownErrors") == false) {
//				columnNames.add("NumUnknownErrors");
//			}
//			temp = new Vector<Object>();
//			for (int i = 0; i < designdocuments.size(); i++) {
//				numFormat.setMinimumFractionDigits(0);
//				numFormat.setMaximumFractionDigits(0);
//				temp.add(numFormat.format(designdocuments.elementAt(i)
//						.getNumUnknownErrors()));
//			}
//			if (data.size() < 3) {
//				data.add(temp);
//			} else {
//				data.setElementAt(temp, 2);
//			}
//
//			// Initialize PercentErroneous:
//			if (columnNames.contains("PercentErroneous") == false) {
//				columnNames.add("PercentErroneous");
//			}
//			temp = new Vector<Object>();
//			for (int i = 0; i < designdocuments.size(); i++) {
//				numFormat.setMinimumFractionDigits(0);
//				numFormat.setMaximumFractionDigits(0);
//				temp.add(numFormat.format(designdocuments.elementAt(i)
//						.getPercentErroneous()));
//			}
//			if (data.size() < 4) {
//				data.add(temp);
//			} else {
//				data.setElementAt(temp, 3);
//			}
//
//			// Initialize PercentComplete:
//			if (columnNames.contains("PercentComplete") == false) {
//				columnNames.add("PercentComplete");
//			}
//			temp = new Vector<Object>();
//			for (int i = 0; i < designdocuments.size(); i++) {
//				numFormat.setMinimumFractionDigits(0);
//				numFormat.setMaximumFractionDigits(0);
//				temp.add(numFormat.format(designdocuments.elementAt(i)
//						.getPercentComplete()));
//			}
//			if (data.size() < 5) {
//				data.add(temp);
//			} else {
//				data.setElementAt(temp, 4);
//			}
//
//			fireTableStructureChanged();
//		}
//
//		fireTableDataChanged(); // notify listeners that table data has changed
//	}

	public Class getColumnClass(int c) {
		return getValueAt(0, c).getClass();
	}

	@Override
	Vector<DesignDocument> getRepository() {
		// TODO Auto-generated method stub
		return state
				.getArtifactStateRepository()
				.getDesignDocumentStateRepository().getAll();
	}
}
