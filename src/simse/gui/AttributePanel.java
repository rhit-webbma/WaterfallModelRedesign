/* File generated by: simse.codegenerator.guigenerator.AttributePanelGenerator */
package simse.gui;

import java.text.NumberFormat;
import java.util.Locale;
import java.util.Vector;

import javafx.geometry.HPos;
import javafx.geometry.Insets;
import javafx.geometry.VPos;
import javafx.scene.control.Label;
import javafx.scene.control.ListView;
import javafx.scene.control.ScrollPane;
import javafx.scene.control.ScrollPane.ScrollBarPolicy;
import javafx.scene.image.Image;
import javafx.scene.image.ImageView;
import javafx.scene.layout.Border;
import javafx.scene.layout.BorderImage;
import javafx.scene.layout.GridPane;
import javafx.scene.layout.HBox;
import javafx.scene.layout.Pane;
import javafx.scene.layout.Priority;
import javafx.scene.paint.Color;
import simse.adts.objects.ACustomer;
import simse.adts.objects.AutomatedTestingTool;
import simse.adts.objects.Code;
import simse.adts.objects.DesignDocument;
import simse.adts.objects.DesignEnvironment;
import simse.adts.objects.IDE;
import simse.adts.objects.RequirementsCaptureTool;
import simse.adts.objects.RequirementsDocument;
import simse.adts.objects.SEProject;
import simse.adts.objects.SSObject;
import simse.adts.objects.SoftwareEngineer;
import simse.adts.objects.SystemTestPlan;
import simse.engine.Engine;
import simse.gui.util.JavaFXHelpers;
import simse.state.State;

public class AttributePanel extends Pane {
	private final int ATTRIBUTE_LIST_CAPACITY = 5; // number of attributes that
													// can be displayed in a
													// list without making the
													// list scrollable

	private GridPane gridPane;
	private ClockPanel clockPane;

	private State state;
	private NumberFormat numFormat;

	private ScrollPane attributePaneLeft;
	private ScrollPane attributePaneRight;
	private ListView attributeListLeft;
	private ListView attributeListRight;

	private Vector<String> attributes;
	private SSObject objInFocus = null;
	private Label selectedIcon;
	private HBox iconPanel;

	private Image border;
	private Image iconBorder;

	public AttributePanel(SimSEGUI g, State s, Engine e) {
		gridPane = new GridPane();
		this.getChildren().add(gridPane);
		this.setBackground(JavaFXHelpers.createBackgroundColor(Color.rgb(102, 102, 102, 1)));
		gridPane.setHgap(10);
		gridPane.setPadding(new Insets(10, 10, 10, 10));

		border = JavaFXHelpers.createImage("src/simse/gui/images/layout/border.gif");
		iconBorder = JavaFXHelpers.createImage("src/simse/gui/images/layout/iconBorder.gif");
		this.setBorder(new Border(new BorderImage(border, null, null, null, true, null, null)));

		state = s;
		clockPane = new ClockPanel(g, s, e);
		clockPane.setPrefSize(250, 100);

		numFormat = NumberFormat.getNumberInstance(Locale.US);

		attributes = new Vector<String>();

		attributeListLeft = new ListView();
		attributePaneLeft = new ScrollPane(attributeListLeft);
		attributePaneLeft.setVbarPolicy(ScrollBarPolicy.AS_NEEDED);
		attributePaneLeft.setPrefSize(300, 95);

		attributeListRight = new ListView();
		attributePaneRight = new ScrollPane(attributeListRight);
		attributePaneRight.setVbarPolicy(ScrollBarPolicy.AS_NEEDED);
		attributePaneRight.setPrefSize(300, 95);

		HBox attributePane = new HBox(5);
		attributePane.getChildren().add(attributePaneLeft);
		attributePane.getChildren().add(attributePaneRight);
		attributePane.setBackground(JavaFXHelpers.createBackgroundColor(Color.rgb(102, 102, 102, 1)));

		iconPanel = new HBox();
		iconPanel.setBackground(JavaFXHelpers.createBackgroundColor(Color.rgb(0, 0, 0, 0)));
		iconPanel.setPrefSize(100, 100);
		selectedIcon = new Label("", JavaFXHelpers.createImageView("src/simse/gui/images/grid.gif"));
		selectedIcon.setOpacity(1);
		selectedIcon.setPrefSize(50, 50);
		selectedIcon.setMinSize(50, 50);

		GridPane.setConstraints(iconPanel, 0, 0, 1, 1, HPos.CENTER, VPos.CENTER, Priority.NEVER, Priority.NEVER,
				new Insets(-3, 5, 0, 0));
		iconPanel.getChildren().add(selectedIcon);
		selectedIcon.setBorder(new Border(new BorderImage(iconBorder, null, null, null, true, null, null)));
		gridPane.getChildren().add(iconPanel);

		GridPane.setConstraints(attributePane, 2, 0, 1, 1, HPos.CENTER, VPos.BOTTOM, Priority.NEVER, Priority.NEVER,
				new Insets(0, 0, 0, 0));
		gridPane.getChildren().add(attributePane);

		GridPane.setConstraints(clockPane, 3, 0, 1, 1, HPos.RIGHT, VPos.BOTTOM, Priority.NEVER, Priority.NEVER,
				new Insets(10, 0, 0, 0));
		gridPane.getChildren().add(clockPane);
	}

	public void setObjectInFocus(SSObject obj, Image img) {
		objInFocus = obj;
		if (img != null) {
			this.setIcon(new ImageView(img));
		}
		updateAttributeList();
	}

	public void update() {
		updateAttributeList();
		clockPane.update();
	}

	public void setGUIChanged() {
	}

	private void updateAttributeList() {
		attributes.clear();
		attributeListLeft.getItems().clear();
		attributeListRight.getItems().clear();

		// Employee:
		if ((objInFocus != null) && state.getEmployeeStateRepository().getAll().contains(objInFocus)) {
			if (objInFocus instanceof SoftwareEngineer) {
				SoftwareEngineer p = (SoftwareEngineer) objInFocus;
				attributes.add("Type: SoftwareEngineer");
				if (!state.getClock().isStopped()) // game not over
				{
					attributes.add("Name: " + p.getName() );
				}
				if (state.getClock().isStopped()) // game is over
				{
					attributes.add("Name: " + p.getName() );
				}
				if (!state.getClock().isStopped()) // game not over
				{
					numFormat.setMinimumFractionDigits(2);
					numFormat.setMaximumFractionDigits(2);
					attributes.add("Energy: " + numFormat.format(p.getEnergy()) );
				}
				if (state.getClock().isStopped()) // game is over
				{
					numFormat.setMinimumFractionDigits(2);
					numFormat.setMaximumFractionDigits(2);
					attributes.add("Energy: " + numFormat.format(p.getEnergy()) );
				}
				if (!state.getClock().isStopped()) // game not over
				{
					numFormat.setMinimumFractionDigits(2);
					numFormat.setMaximumFractionDigits(2);
					attributes.add("Mood: " + numFormat.format(p.getMood()) );
				}
				if (state.getClock().isStopped()) // game is over
				{
					numFormat.setMinimumFractionDigits(2);
					numFormat.setMaximumFractionDigits(2);
					attributes.add("Mood: " + numFormat.format(p.getMood()) );
				}
				if (!state.getClock().isStopped()) // game not over
				{
					attributes.add("RequirementsExperience: " + p.getRequirementsExperience()
							);
				}
				if (state.getClock().isStopped()) // game is over
				{
					attributes.add("RequirementsExperience: " + p.getRequirementsExperience()
							);
				}
				if (!state.getClock().isStopped()) // game not over
				{
					attributes
							.add("DesignExperience: " + p.getDesignExperience() );
				}
				if (state.getClock().isStopped()) // game is over
				{
					attributes
							.add("DesignExperience: " + p.getDesignExperience() );
				}
				if (!state.getClock().isStopped()) // game not over
				{
					attributes
							.add("CodingExperience: " + p.getCodingExperience() );
				}
				if (state.getClock().isStopped()) // game is over
				{
					attributes
							.add("CodingExperience: " + p.getCodingExperience() );
				}
				if (!state.getClock().isStopped()) // game not over
				{
					attributes.add(
							"TestingExperience: " + p.getTestingExperience() );
				}
				if (state.getClock().isStopped()) // game is over
				{
					attributes.add(
							"TestingExperience: " + p.getTestingExperience() );
				}
				if (!state.getClock().isStopped()) // game not over
				{
					numFormat.setMinimumFractionDigits(2);
					numFormat.setMaximumFractionDigits(2);
					attributes
							.add("PayRate: " + numFormat.format(p.getPayRate()) );
				}
				if (state.getClock().isStopped()) // game is over
				{
					numFormat.setMinimumFractionDigits(2);
					numFormat.setMaximumFractionDigits(2);
					attributes
							.add("PayRate: " + numFormat.format(p.getPayRate()) );
				}
			}
		}
		// Artifact:
		else if ((objInFocus != null) && state.getArtifactStateRepository().getAll().contains(objInFocus)) {
			if (objInFocus instanceof RequirementsDocument) {
				RequirementsDocument p = (RequirementsDocument) objInFocus;
				attributes.add("Type: RequirementsDocument");
				if (!state.getClock().isStopped()) // game not over
				{
					attributes.add("Name: " + p.getName() );
				}
				if (state.getClock().isStopped()) // game is over
				{
					attributes.add("Name: " + p.getName() );
				}
				if (!state.getClock().isStopped()) // game not over
				{
					numFormat.setMinimumFractionDigits(0);
					numFormat.setMaximumFractionDigits(0);
					attributes.add("NumKnownErrors: " + numFormat.format(p.getNumKnownErrors())
							);
				}
				if (state.getClock().isStopped()) // game is over
				{
					numFormat.setMinimumFractionDigits(0);
					numFormat.setMaximumFractionDigits(0);
					attributes.add("NumKnownErrors: " + numFormat.format(p.getNumKnownErrors())
							);
				}
				if (state.getClock().isStopped()) // game is over
				{
					numFormat.setMinimumFractionDigits(0);
					numFormat.setMaximumFractionDigits(0);
					attributes.add("NumUnknownErrors: " + numFormat.format(p.getNumUnknownErrors())
							);
				}
				if (state.getClock().isStopped()) // game is over
				{
					numFormat.setMinimumFractionDigits(0);
					numFormat.setMaximumFractionDigits(0);
					attributes.add("PercentErroneous: " + numFormat.format(p.getPercentErroneous())
							);
				}
				if (!state.getClock().isStopped()) // game not over
				{
					numFormat.setMinimumFractionDigits(0);
					numFormat.setMaximumFractionDigits(0);
					attributes.add("PercentComplete: " + numFormat.format(p.getPercentComplete())
							);
				}
				if (state.getClock().isStopped()) // game is over
				{
					numFormat.setMinimumFractionDigits(0);
					numFormat.setMaximumFractionDigits(0);
					attributes.add("PercentComplete: " + numFormat.format(p.getPercentComplete())
							);
				}
			} else if (objInFocus instanceof DesignDocument) {
				DesignDocument p = (DesignDocument) objInFocus;
				attributes.add("Type: DesignDocument");
				if (!state.getClock().isStopped()) // game not over
				{
					attributes.add("Name: " + p.getName() );
				}
				if (state.getClock().isStopped()) // game is over
				{
					attributes.add("Name: " + p.getName() );
				}
				if (!state.getClock().isStopped()) // game not over
				{
					numFormat.setMinimumFractionDigits(0);
					numFormat.setMaximumFractionDigits(0);
					attributes.add("NumKnownErrors: " + numFormat.format(p.getNumKnownErrors())
							);
				}
				if (state.getClock().isStopped()) // game is over
				{
					numFormat.setMinimumFractionDigits(0);
					numFormat.setMaximumFractionDigits(0);
					attributes.add("NumKnownErrors: " + numFormat.format(p.getNumKnownErrors())
							);
				}
				if (state.getClock().isStopped()) // game is over
				{
					numFormat.setMinimumFractionDigits(0);
					numFormat.setMaximumFractionDigits(0);
					attributes.add("NumUnknownErrors: " + numFormat.format(p.getNumUnknownErrors())
							);
				}
				if (state.getClock().isStopped()) // game is over
				{
					numFormat.setMinimumFractionDigits(0);
					numFormat.setMaximumFractionDigits(0);
					attributes.add("PercentErroneous: " + numFormat.format(p.getPercentErroneous())
							);
				}
				if (!state.getClock().isStopped()) // game not over
				{
					numFormat.setMinimumFractionDigits(0);
					numFormat.setMaximumFractionDigits(0);
					attributes.add("PercentComplete: " + numFormat.format(p.getPercentComplete())
							);
				}
				if (state.getClock().isStopped()) // game is over
				{
					numFormat.setMinimumFractionDigits(0);
					numFormat.setMaximumFractionDigits(0);
					attributes.add("PercentComplete: " + numFormat.format(p.getPercentComplete())
							);
				}
			} else if (objInFocus instanceof Code) {
				Code p = (Code) objInFocus;
				attributes.add("Type: Code");
				if (!state.getClock().isStopped()) // game not over
				{
					attributes.add("Name: " + p.getName() );
				}
				if (state.getClock().isStopped()) // game is over
				{
					attributes.add("Name: " + p.getName() );
				}
				if (!state.getClock().isStopped()) // game not over
				{
					numFormat.setMinimumFractionDigits(0);
					numFormat.setMaximumFractionDigits(0);
					attributes.add("PercentComplete: " + numFormat.format(p.getPercentComplete())
							);
				}
				if (state.getClock().isStopped()) // game is over
				{
					numFormat.setMinimumFractionDigits(0);
					numFormat.setMaximumFractionDigits(0);
					attributes.add("PercentComplete: " + numFormat.format(p.getPercentComplete())
							);
				}
				if (!state.getClock().isStopped()) // game not over
				{
					numFormat.setMinimumFractionDigits(0);
					numFormat.setMaximumFractionDigits(0);
					attributes.add("PercentIntegrated: " + numFormat.format(p.getPercentIntegrated())
							);
				}
				if (state.getClock().isStopped()) // game is over
				{
					numFormat.setMinimumFractionDigits(0);
					numFormat.setMaximumFractionDigits(0);
					attributes.add("PercentIntegrated: " + numFormat.format(p.getPercentIntegrated())
							);
				}
				if (!state.getClock().isStopped()) // game not over
				{
					numFormat.setMinimumFractionDigits(0);
					numFormat.setMaximumFractionDigits(0);
					attributes.add("NumKnownErrors: " + numFormat.format(p.getNumKnownErrors())
							);
				}
				if (state.getClock().isStopped()) // game is over
				{
					numFormat.setMinimumFractionDigits(0);
					numFormat.setMaximumFractionDigits(0);
					attributes.add("NumKnownErrors: " + numFormat.format(p.getNumKnownErrors())
							);
				}
				if (state.getClock().isStopped()) // game is over
				{
					numFormat.setMinimumFractionDigits(0);
					numFormat.setMaximumFractionDigits(0);
					attributes.add("NumUnknownErrors: " + numFormat.format(p.getNumUnknownErrors())
							);
				}
				if (state.getClock().isStopped()) // game is over
				{
					numFormat.setMinimumFractionDigits(0);
					numFormat.setMaximumFractionDigits(0);
					attributes.add("PercentErroneous: " + numFormat.format(p.getPercentErroneous())
							);
				}
			} else if (objInFocus instanceof SystemTestPlan) {
				SystemTestPlan p = (SystemTestPlan) objInFocus;
				attributes.add("Type: SystemTestPlan");
				if (!state.getClock().isStopped()) // game not over
				{
					attributes.add("Name: " + p.getName() );
				}
				if (state.getClock().isStopped()) // game is over
				{
					attributes.add("Name: " + p.getName() );
				}
				if (!state.getClock().isStopped()) // game not over
				{
					numFormat.setMinimumFractionDigits(0);
					numFormat.setMaximumFractionDigits(0);
					attributes.add("NumKnownErrors: " + numFormat.format(p.getNumKnownErrors())
							);
				}
				if (state.getClock().isStopped()) // game is over
				{
					numFormat.setMinimumFractionDigits(0);
					numFormat.setMaximumFractionDigits(0);
					attributes.add("NumKnownErrors: " + numFormat.format(p.getNumKnownErrors())
							);
				}
				if (state.getClock().isStopped()) // game is over
				{
					numFormat.setMinimumFractionDigits(0);
					numFormat.setMaximumFractionDigits(0);
					attributes.add("NumUnknownErrors: " + numFormat.format(p.getNumUnknownErrors())
							);
				}
				if (state.getClock().isStopped()) // game is over
				{
					numFormat.setMinimumFractionDigits(0);
					numFormat.setMaximumFractionDigits(0);
					attributes.add("PercentErroneous: " + numFormat.format(p.getPercentErroneous())
							);
				}
				if (!state.getClock().isStopped()) // game not over
				{
					numFormat.setMinimumFractionDigits(0);
					numFormat.setMaximumFractionDigits(0);
					attributes.add("PercentComplete: " + numFormat.format(p.getPercentComplete())
							);
				}
				if (state.getClock().isStopped()) // game is over
				{
					numFormat.setMinimumFractionDigits(0);
					numFormat.setMaximumFractionDigits(0);
					attributes.add("PercentComplete: " + numFormat.format(p.getPercentComplete())
							);
				}
			}
		}
		// Tool:
		else if ((objInFocus != null) && state.getToolStateRepository().getAll().contains(objInFocus)) {
			if (objInFocus instanceof RequirementsCaptureTool) {
				RequirementsCaptureTool p = (RequirementsCaptureTool) objInFocus;
				attributes.add("Type: RequirementsCaptureTool");
				if (!state.getClock().isStopped()) // game not over
				{
					attributes.add("Name: " + p.getName() );
				}
				if (state.getClock().isStopped()) // game is over
				{
					attributes.add("Name: " + p.getName() );
				}
				if (!state.getClock().isStopped()) // game not over
				{
					numFormat.setMinimumFractionDigits(2);
					numFormat.setMaximumFractionDigits(2);
					attributes.add("Cost: " + numFormat.format(p.getCost()) );
				}
				if (state.getClock().isStopped()) // game is over
				{
					numFormat.setMinimumFractionDigits(2);
					numFormat.setMaximumFractionDigits(2);
					attributes.add("Cost: " + numFormat.format(p.getCost()) );
				}
				if (state.getClock().isStopped()) // game is over
				{
					numFormat.setMinimumFractionDigits(2);
					numFormat.setMaximumFractionDigits(2);
					attributes.add("ProductivityIncreaseFactor: "
							+ numFormat.format(p.getProductivityIncreaseFactor()) );
				}
				if (state.getClock().isStopped()) // game is over
				{
					numFormat.setMinimumFractionDigits(2);
					numFormat.setMaximumFractionDigits(2);
					attributes.add("ErrorRateDecreaseFactor: "
							+ numFormat.format(p.getErrorRateDecreaseFactor()) );
				}
				if (!state.getClock().isStopped()) // game not over
				{
					attributes.add("Purchased: " + p.getPurchased() );
				}
				if (state.getClock().isStopped()) // game is over
				{
					attributes.add("Purchased: " + p.getPurchased() );
				}
			} else if (objInFocus instanceof DesignEnvironment) {
				DesignEnvironment p = (DesignEnvironment) objInFocus;
				attributes.add("Type: DesignEnvironment");
				if (!state.getClock().isStopped()) // game not over
				{
					attributes.add("Name: " + p.getName() );
				}
				if (state.getClock().isStopped()) // game is over
				{
					attributes.add("Name: " + p.getName() );
				}
				if (!state.getClock().isStopped()) // game not over
				{
					numFormat.setMinimumFractionDigits(2);
					numFormat.setMaximumFractionDigits(2);
					attributes.add("Cost: " + numFormat.format(p.getCost()) );
				}
				if (state.getClock().isStopped()) // game is over
				{
					numFormat.setMinimumFractionDigits(2);
					numFormat.setMaximumFractionDigits(2);
					attributes.add("Cost: " + numFormat.format(p.getCost()) );
				}
				if (state.getClock().isStopped()) // game is over
				{
					numFormat.setMinimumFractionDigits(2);
					numFormat.setMaximumFractionDigits(2);
					attributes.add("ProductivityIncreaseFactor: "
							+ numFormat.format(p.getProductivityIncreaseFactor()) );
				}
				if (state.getClock().isStopped()) // game is over
				{
					numFormat.setMinimumFractionDigits(2);
					numFormat.setMaximumFractionDigits(2);
					attributes.add("ErrorRateDecreaseFactor: "
							+ numFormat.format(p.getErrorRateDecreaseFactor()) );
				}
				if (!state.getClock().isStopped()) // game not over
				{
					attributes.add("Purchased: " + p.getPurchased() );
				}
				if (state.getClock().isStopped()) // game is over
				{
					attributes.add("Purchased: " + p.getPurchased() );
				}
			} else if (objInFocus instanceof IDE) {
				IDE p = (IDE) objInFocus;
				attributes.add("Type: IDE");
				if (!state.getClock().isStopped()) // game not over
				{
					attributes.add("Name: " + p.getName() );
				}
				if (state.getClock().isStopped()) // game is over
				{
					attributes.add("Name: " + p.getName() );
				}
				if (!state.getClock().isStopped()) // game not over
				{
					numFormat.setMinimumFractionDigits(2);
					numFormat.setMaximumFractionDigits(2);
					attributes.add("Cost: " + numFormat.format(p.getCost()) );
				}
				if (state.getClock().isStopped()) // game is over
				{
					numFormat.setMinimumFractionDigits(2);
					numFormat.setMaximumFractionDigits(2);
					attributes.add("Cost: " + numFormat.format(p.getCost()) );
				}
				if (state.getClock().isStopped()) // game is over
				{
					numFormat.setMinimumFractionDigits(2);
					numFormat.setMaximumFractionDigits(2);
					attributes.add("ProductivityIncreaseFactor: "
							+ numFormat.format(p.getProductivityIncreaseFactor()) );
				}
				if (state.getClock().isStopped()) // game is over
				{
					numFormat.setMinimumFractionDigits(2);
					numFormat.setMaximumFractionDigits(2);
					attributes.add("ErrorRateDecreaseFactor: "
							+ numFormat.format(p.getErrorRateDecreaseFactor()) );
				}
				if (!state.getClock().isStopped()) // game not over
				{
					attributes.add("Purchased: " + p.getPurchased() );
				}
				if (state.getClock().isStopped()) // game is over
				{
					attributes.add("Purchased: " + p.getPurchased() );
				}
			} else if (objInFocus instanceof AutomatedTestingTool) {
				AutomatedTestingTool p = (AutomatedTestingTool) objInFocus;
				attributes.add("Type: AutomatedTestingTool");
				if (!state.getClock().isStopped()) // game not over
				{
					attributes.add("Name: " + p.getName() );
				}
				if (state.getClock().isStopped()) // game is over
				{
					attributes.add("Name: " + p.getName() );
				}
				if (!state.getClock().isStopped()) // game not over
				{
					numFormat.setMinimumFractionDigits(2);
					numFormat.setMaximumFractionDigits(2);
					attributes.add("Cost: " + numFormat.format(p.getCost()) );
				}
				if (state.getClock().isStopped()) // game is over
				{
					numFormat.setMinimumFractionDigits(2);
					numFormat.setMaximumFractionDigits(2);
					attributes.add("Cost: " + numFormat.format(p.getCost()) );
				}
				if (state.getClock().isStopped()) // game is over
				{
					numFormat.setMinimumFractionDigits(2);
					numFormat.setMaximumFractionDigits(2);
					attributes.add("ProductivityIncreaseFactor: "
							+ numFormat.format(p.getProductivityIncreaseFactor()) );
				}
				if (state.getClock().isStopped()) // game is over
				{
					numFormat.setMinimumFractionDigits(2);
					numFormat.setMaximumFractionDigits(2);
					attributes.add("ErrorRateDecreaseFactor: "
							+ numFormat.format(p.getErrorRateDecreaseFactor()) );
				}
				if (!state.getClock().isStopped()) // game not over
				{
					attributes.add("Purchased: " + p.getPurchased() );
				}
				if (state.getClock().isStopped()) // game is over
				{
					attributes.add("Purchased: " + p.getPurchased() );
				}
			}
		}
		// Project:
		else if ((objInFocus != null) && state.getProjectStateRepository().getAll().contains(objInFocus)) {
			if (objInFocus instanceof SEProject) {
				SEProject p = (SEProject) objInFocus;
				attributes.add("Type: SEProject");
				if (!state.getClock().isStopped()) // game not over
				{
					attributes.add("Description: " + p.getDescription() );
				}
				if (state.getClock().isStopped()) // game is over
				{
					attributes.add("Description: " + p.getDescription() );
				}
				if (!state.getClock().isStopped()) // game not over
				{
					numFormat.setMinimumFractionDigits(2);
					numFormat.setMaximumFractionDigits(2);
					attributes.add("Budget: " + numFormat.format(p.getBudget()) );
				}
				if (state.getClock().isStopped()) // game is over
				{
					numFormat.setMinimumFractionDigits(2);
					numFormat.setMaximumFractionDigits(2);
					attributes.add("Budget: " + numFormat.format(p.getBudget()) );
				}
				if (!state.getClock().isStopped()) // game not over
				{
					numFormat.setMinimumFractionDigits(2);
					numFormat.setMaximumFractionDigits(2);
					attributes.add(
							"MoneySpent: " + numFormat.format(p.getMoneySpent()) );
				}
				if (state.getClock().isStopped()) // game is over
				{
					numFormat.setMinimumFractionDigits(2);
					numFormat.setMaximumFractionDigits(2);
					attributes.add(
							"MoneySpent: " + numFormat.format(p.getMoneySpent()) );
				}
				if (!state.getClock().isStopped()) // game not over
				{
					attributes.add("AllottedTime: " + p.getAllottedTime() );
				}
				if (state.getClock().isStopped()) // game is over
				{
					attributes.add("AllottedTime: " + p.getAllottedTime() );
				}
				if (!state.getClock().isStopped()) // game not over
				{
					attributes.add("TimeUsed: " + p.getTimeUsed() );
				}
				if (state.getClock().isStopped()) // game is over
				{
					attributes.add("TimeUsed: " + p.getTimeUsed());
				}
				if (state.getClock().isStopped()) // game is over
				{
					attributes.add("Score: " + p.getScore());
				}
			}
		}
		// Customer:
		else if ((objInFocus != null) && state.getCustomerStateRepository().getAll().contains(objInFocus)) {
			if (objInFocus instanceof ACustomer) {
				ACustomer p = (ACustomer) objInFocus;
				attributes.add("Type: aCustomer");
				if (!state.getClock().isStopped()) // game not over
				{
					attributes.add("Name: " + p.getName());
				}
				if (state.getClock().isStopped()) // game is over
				{
					attributes.add("Name: " + p.getName());
				}
			}
		} else {
			this.setIcon(JavaFXHelpers.createImageView("src/simse/gui/images/grid.gif"));
		}

//		attributeListLeft.setUserData(attributes);
		
		for(String data : attributes) {
			attributeListLeft.getItems().add(data);
		}
//		attributeListRight.setUserData(new Vector());

		// distribute attributes to both sides, if needed:
		Vector<String> rightHandAtts = new Vector<String>();
		if (attributes.size() > ATTRIBUTE_LIST_CAPACITY) { // need to use 2nd list
			attributeListLeft.getItems().clear();
			attributeListRight.getItems().clear();
			while ((ATTRIBUTE_LIST_CAPACITY) < attributes.size()) { // there are still more elements to
																	// move to right
				rightHandAtts.add(attributes.remove(ATTRIBUTE_LIST_CAPACITY)); // remove from left, put on right
			}
			for(String data : rightHandAtts) {
				attributeListRight.getItems().add(data);
			}
//			attributeListRight.setUserData(rightHandAtts);
			for(String data : attributes) {
				attributeListLeft.getItems().add(data);
			}
//			attributeListLeft.setUserData(attributes);

//				if (attributePaneLeft.) // need to move one more over to account
//																			// for extra space that scrollbar takes up
//				{
//					rightHandAtts.add(0, attributes.remove(attributes.size() - 1)); // move
//					attributeListRight.setUserData(rightHandAtts);
//					attributeListLeft.setUserData(attributes);
//				}
		}
	}

	public ClockPanel getClockPanel() {
		return clockPane;
	}

	public void setIcon(ImageView img) {
		selectedIcon.setBackground(JavaFXHelpers.createBackgroundColor(Color.WHITE));
		selectedIcon.setGraphic(img);
	}
}