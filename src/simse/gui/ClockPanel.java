/* File generated by: simse.codegenerator.guigenerator.ClockPanelGenerator */
package simse.gui;

import java.util.ArrayList;
import java.util.Optional;

import javafx.event.EventHandler;
import javafx.geometry.Insets;
import javafx.scene.Cursor;
import javafx.scene.canvas.Canvas;
import javafx.scene.canvas.GraphicsContext;
import javafx.scene.control.Alert;
import javafx.scene.control.Alert.AlertType;
import javafx.scene.control.ButtonType;
import javafx.scene.control.CheckBox;
import javafx.scene.control.Label;
import javafx.scene.control.TextField;
import javafx.scene.image.Image;
import javafx.scene.image.ImageView;
import javafx.scene.input.MouseEvent;
import javafx.scene.layout.Border;
import javafx.scene.layout.BorderStroke;
import javafx.scene.layout.BorderStrokeStyle;
import javafx.scene.layout.BorderWidths;
import javafx.scene.layout.CornerRadii;
import javafx.scene.layout.GridPane;
import javafx.scene.layout.Pane;
import javafx.scene.layout.StackPane;
import javafx.scene.paint.Color;
import simse.engine.Engine;
import simse.gui.util.JavaFXHelpers;
import simse.state.State;

public class ClockPanel extends Pane implements EventHandler<MouseEvent> {
	private State state;
	private Engine engine;
	private SimSEGUI gui;
	private Canvas canvas;

	private int screenX = 300; // x width of the screen
	private int screenY = 100; // y width of the screen

	private TextField txtAdvClock;
	private Label btnAdvClock;
	private Label btnNextEvent;
	private Label lblTimeElapsed;
	private Image[] timeElapsedDigits;
	private CheckBox stopCBox;

	private StackPane stackPane;
	
	private boolean cursorDisplayed;
	private String cursor;

	private static ImageView icoNextEvent = JavaFXHelpers.createImageView("src/simse/gui/images/layout/btnNextEvent.gif");
	private static ImageView icoAdvClock = JavaFXHelpers.createImageView("src/simse/gui/images/layout/btnAdvClock.gif");
	private static ImageView icoStopClock = JavaFXHelpers.createImageView("src/simse/gui/images/layout/btnStopClock.gif");

	public ClockPanel(SimSEGUI g, State s, Engine e) {
		gui = g;
		state = s;
		engine = e;
		stackPane = new StackPane();
		update();
		buildGUI();
		this.getChildren().add(stackPane);
	}

	private void buildGUI() {
		GridPane buttonGridPane = new GridPane();

//		stackPane.setGridLinesVisible(true);
		
		btnNextEvent = new Label();
		btnNextEvent.setBackground(JavaFXHelpers.createBackgroundColor(Color.DARKGRAY));
		btnNextEvent.setGraphic(icoNextEvent);
		btnNextEvent.addEventHandler(MouseEvent.ANY, this);
		buttonGridPane.add(btnNextEvent, 0, 0);
//		stackPane.setConstraints(btnNextEvent, 0, 0, 1, 1, HPos.RIGHT, VPos.TOP, Priority.NEVER, 
//				Priority.NEVER, new Insets(12, 0, 0, 25));

		btnAdvClock = new Label();
		btnAdvClock.setGraphic(icoAdvClock);
		btnAdvClock.addEventHandler(MouseEvent.ANY, this);
		buttonGridPane.add(btnAdvClock, 0, 1);
//		stackPane.setConstraints(btnAdvClock, 0, 0, 1, 1, HPos.RIGHT, VPos.TOP, Priority.NEVER, 
//				Priority.NEVER, new Insets(2, 0, 0, 25));

		stopCBox = new CheckBox();
		stopCBox.setBackground(JavaFXHelpers.createBackgroundColor(Color.WHITE));
		stopCBox.setOpacity(1);
		stopCBox.addEventHandler(MouseEvent.ANY, this);
		stopCBox.setPrefSize(1, 1);
		buttonGridPane.add(stopCBox, 0, 2);
//		stackPane.setConstraints(stopCBox, 0, 2, 1, 1, HPos.RIGHT, VPos.TOP, Priority.NEVER, 
//				Priority.NEVER, new Insets(-3, 0, 0, 100));


		txtAdvClock = new TextField("1");
		txtAdvClock.setBackground(JavaFXHelpers.createBackgroundColor(Color.DARKGRAY));
		txtAdvClock.setOpacity(0);
		txtAdvClock.setPrefSize(90, 18);
		txtAdvClock.setBorder(new Border(new BorderStroke(new Color(0, 0, 0, 0), 
	            BorderStrokeStyle.SOLID, CornerRadii.EMPTY, BorderWidths.DEFAULT)));
		txtAdvClock.setPadding(new Insets(10,10,10,10));
		buttonGridPane.add(txtAdvClock, 0, 3);
		buttonGridPane.setPadding(new Insets(12,0,100,130));
//		stackPane.setConstraints(txtAdvClock, 0, 3, 1, 1, HPos.RIGHT, VPos.TOP, Priority.NEVER, 
//				Priority.NEVER, new Insets(-5, 0, 0, 30));
		stackPane.getChildren().addAll(canvas, buttonGridPane);
	}

	public void resetAdvClockImage() {
		stopCBox.setDisable(false);
		btnAdvClock.setGraphic(icoAdvClock);
	}

	public void setAdvClockImage() {
		btnAdvClock.setGraphic(icoStopClock);
	}

	public void mouseClicked(MouseEvent me) {
		
	}

	public void repaint() {
		canvas = new Canvas(250,250);
		GraphicsContext gc = canvas.getGraphicsContext2D();
		
		Image img = JavaFXHelpers.createImage("src/simse/gui/images/layout/clock.gif");

		gc.setFill(Color.DARKGRAY);
		gc.fillRect(0, 0, 242 + 10, 96 + 20);
		gc.drawImage(img, 0, 0);

		// draws the Time Elapsed numbers
		for (int i = 0; i < timeElapsedDigits.length && i < 9; i++) {
			int blanks = (9 - timeElapsedDigits.length) * 10;
			if (blanks < 0) {
				blanks = 0;
			}

			int x = 20 + blanks + (i * 10);
			gc.drawImage(timeElapsedDigits[i], x, 52);
		}
	}

	// jumps to the next event -- the next time someone has an overhead text to
	// say
	public void nextEvent() {
		engine.setStopAtEvents(true);
		engine.setSteps(10000);
	}

	// used to refresh the clock number displayed next to Elapsed Time
	public void update() {
		// offset used so that when the number of digits increase (1, 10, 100,
		// 1000, etc) it shifts accordingly
		int clockTicks = state.getClock().getTime();
		convert(clockTicks);
	}

	// converts the time into a series of digit images
	private void convert(int time) {
		ArrayList<Image> list = new ArrayList<Image>();
		String s = "" + time;

		for (int i = 0; i < s.length(); i++) {
			int digit = Character.digit(s.charAt(i), 10);
			Image img = JavaFXHelpers.createImage("src/simse/gui/images/layout/n" + digit + ".gif");
			list.add(img);
		}
		timeElapsedDigits = (Image[]) list.toArray(new Image[1]);
		repaint();
	}

	@Override
	public void handle(MouseEvent event) {
		Object source = event.getSource();
		if (event.getEventType() == MouseEvent.MOUSE_ENTERED) {
			if (source == btnNextEvent || source == btnAdvClock) {
				setCursor(Cursor.HAND);
			}
		} else if (event.getEventType() == MouseEvent.MOUSE_EXITED) {
			setCursor(Cursor.DEFAULT);
		} else if (event.getEventType() == MouseEvent.MOUSE_CLICKED) {
			if (state.getClock().isStopped() == false) // clock not stopped
			{
				if (source == btnNextEvent) {
					stopCBox.setDisable(true);
					nextEvent();
				} else if (source == btnAdvClock) {
					if (engine.isRunning()) {
						engine.stop();
					} else {
						int ticks = 0;
						try {
							ticks = Integer.parseInt(txtAdvClock.getText().trim());
							if (ticks <= 0) // negative number entered)
							{
								Alert alert = new Alert(AlertType.ERROR);
								alert.setTitle("Error");
								String s = "Please enter a positive integer number of clock ticks";
								alert.setContentText(s);
								 
								Optional<ButtonType> result = alert.showAndWait();
							} else {
								engine.setSteps(ticks);
							}
						} catch (NumberFormatException nfe) {
							Alert alert = new Alert(AlertType.ERROR);
							alert.setTitle("Error");
							String s = "Please enter a positive integer number of clock ticks";
							alert.setContentText(s);
							 
							Optional<ButtonType> result = alert.showAndWait();
						}
					}
				}
				if (stopCBox.isDisabled()) {
					engine.setStopAtEvents(stopCBox.isSelected());
				}

			}
		}
	}
}