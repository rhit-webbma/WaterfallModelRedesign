/* File generated by: simse.codegenerator.guigenerator.AtAGlanceFramesGenerator */
package simse.gui;

import simse.adts.objects.SEProject;
import simse.state.*;
import java.util.*;

import javafx.collections.ObservableList;
import javafx.event.EventHandler;
import javafx.geometry.Point2D;
import javafx.scene.control.ContextMenu;
import javafx.scene.control.Label;
import javafx.scene.control.MenuItem;
import javafx.scene.control.PopupControl;
import javafx.scene.control.ScrollPane;
import javafx.scene.control.TableColumn;
import javafx.scene.control.TableView;
import javafx.scene.input.MouseEvent;
import javafx.scene.layout.Pane;
import javafx.scene.layout.VBox;
import javafx.stage.Stage;

import java.text.*;
import java.awt.Color;

public class ProjectsAtAGlanceFrame extends Stage implements EventHandler<MouseEvent>{
	private State state;

	private ContextMenu popup;
	private PopupListener popupListener;
	private TableView<SEProject> seprojectTable;
	private SEProjectTableModel seprojectModel;
	private Pane seprojectTitlePane;
	private VBox mainPane;

	private int realColumnIndex; // index of selected column
	private TableView<SEProject> selectedTable; // selected table

	public ProjectsAtAGlanceFrame(State s, SimSEGUI gui) {
		state = s;
		// Set window title:
		setTitle("Projects At-A-Glance");

		// Create tables:
		int numCols;

		seprojectModel = new SEProjectTableModel(s);
		seprojectTable = seprojectModel.createTable();
		seprojectTable.getSelectionModel().setCellSelectionEnabled(false);
		seprojectTable.addEventHandler(MouseEvent.MOUSE_CLICKED, this);
//		seprojectTable.getTableHeader().setReorderingAllowed(false); 
		// make it so that the user can make each column disappear if they want:
		numCols = seprojectTable.getColumns().size();
		for (int i = 0; i < numCols; i++) {
			seprojectTable.getColumns().get(i).setMinWidth(0);
		}

		// right click menu:
		popup = new ContextMenu();
		popupListener = new PopupListener(popup, gui);

		// Create panes:
		ScrollPane seprojectPane = new ScrollPane(seprojectTable);

		// Table headers:
		seprojectTitlePane = new Pane();
		seprojectTitlePane.getChildren().add(new Label("SEProjects:"));

		// Create main pane:
		mainPane = new VBox();

		// Add panes to main pane:
		mainPane.getChildren().addAll(seprojectTitlePane, seprojectPane);


		// Set main window frame properties:
//		setBackground(Color.white);
//		setContentPane(mainPane);
//		setVisible(false);
//		pack();
//		validate();
		hide();

		resetHeight();
	}
	
	@Override
	public void handle(MouseEvent e) {
		Object source = e.getSource();
		Point2D p = new Point2D(e.getX(), e.getY());

		if (e.isPopupTrigger()) {
			if (source.equals(seprojectTable)) // correct table
			{
				createPopupMenu(seprojectTable, p);
			}
		}
		
		if (source instanceof MenuItem) {
			String itemText = ((MenuItem) source).getText();
			if (itemText.equals("Hide")) {
				if (selectedTable != null) {
					selectedTable.getColumns().get(realColumnIndex).setMaxWidth(0);
				}
			} else // an item on the "Unhide" menu
			{
				TableModel model = selectedTable.getModel();
				TableColumn column = null;
				if (model instanceof SEProjectTableModel) {
					column = selectedTable.getColumnModel()
							.getColumn(
									((SEProjectTableModel) selectedTable
											.getModel())
											.getColumnIndex(itemText));
				}
				if (column != null) {
					column.setMinWidth(0);
					column.setMaxWidth(2147483647);
					column.setPreferredWidth(selectedTable.getWidth()
							/ (selectedTable.getColumnCount()
									- getAllHiddenColumnIndices(
											selectedTable).size() + 1));
				}
			}
		}
	}


	public void createPopupMenu(TableView<SEProject> table, Point2D p) {
		popup.getItems().removeAll();

		int colIndex = table.columnAtPoint(p);
		realColumnIndex = table.convertColumnIndexToModel(colIndex);

		Vector<Integer> hiddenCols = getAllHiddenColumnIndices(table);

		if ((realColumnIndex >= 0) || (hiddenCols.size() > 0)) // user clicked
																// on a column
																// and/or there
																// is at least
																// one hidden
																// column
		{
			if (realColumnIndex >= 0) {
				JMenuItem hideItem = new JMenuItem("Hide");
				hideItem.addActionListener(this);
				popup.add(hideItem);
			}

			if (hiddenCols.size() > 0) // there is at least one hidden column
			{
				JMenu unhideMenu = new JMenu("Unhide");
				for (int i = 0; i < hiddenCols.size(); i++) {
					int index = hiddenCols.elementAt(i).intValue();
					JMenuItem tempItem = new JMenuItem(
							table.getColumnName(index));
					tempItem.addActionListener(this);
					unhideMenu.add(tempItem);
				}
				if (popup.getComponents().length > 0) // already has the hide
														// menu item
				{
					popup.addSeparator();
				}
				popup.add(unhideMenu);
			}

			addMouseListener(popupListener);
			popup.show(table, (int) p.getX(), (int) p.getY());
			selectedTable = table;
			repaint();
		}
	}

	public void update() {
		DefaultTableCellRenderer rightAlignRenderer = new DefaultTableCellRenderer();
		rightAlignRenderer.setHorizontalAlignment(JLabel.RIGHT);
		seprojectModel.update();
		if (!state.getClock().isStopped()) { // game not over
			seprojectTable.getColumnModel()
					.getColumn(seprojectModel.getColumnIndex("Budget"))
					.setCellRenderer(rightAlignRenderer);
			seprojectTable.getColumnModel()
					.getColumn(seprojectModel.getColumnIndex("MoneySpent"))
					.setCellRenderer(rightAlignRenderer);
			seprojectTable.getColumnModel()
					.getColumn(seprojectModel.getColumnIndex("AllottedTime"))
					.setCellRenderer(rightAlignRenderer);
			seprojectTable.getColumnModel()
					.getColumn(seprojectModel.getColumnIndex("TimeUsed"))
					.setCellRenderer(rightAlignRenderer);
		} else { // game over
			seprojectTable.getColumnModel()
					.getColumn(seprojectModel.getColumnIndex("Budget"))
					.setCellRenderer(rightAlignRenderer);
			seprojectTable.getColumnModel()
					.getColumn(seprojectModel.getColumnIndex("MoneySpent"))
					.setCellRenderer(rightAlignRenderer);
			seprojectTable.getColumnModel()
					.getColumn(seprojectModel.getColumnIndex("AllottedTime"))
					.setCellRenderer(rightAlignRenderer);
			seprojectTable.getColumnModel()
					.getColumn(seprojectModel.getColumnIndex("TimeUsed"))
					.setCellRenderer(rightAlignRenderer);
			seprojectTable.getColumnModel()
					.getColumn(seprojectModel.getColumnIndex("Score"))
					.setCellRenderer(rightAlignRenderer);
		}
		seprojectTable.update(seprojectTable.getGraphics());
		resetHeight();
	}

	private void resetHeight() {
		// Set appropriate height:
		double height = 0;
		height += ((seprojectTable.getRowHeight() + (seprojectTable
				.getRowMargin() * 2)) * (seprojectTable.getRowCount() + 1));
		height += seprojectTitlePane.getSize().getHeight();

		mainPane.setPreferredSize(new Dimension((int) (mainPane.getSize()
				.getWidth()), (int) height));
		pack();
		validate();
		repaint();
	}

	private Vector<Integer> getAllHiddenColumnIndices(JTable table) {
		Vector<Integer> hiddenCols = new Vector<Integer>();
		int numCols = table.getColumnModel().getColumnCount();
		for (int i = 0; i < numCols; i++) {
			TableColumn col = table.getColumnModel().getColumn(i);
			if (col.getWidth() == 0) // hidden
			{
				hiddenCols.add(new Integer(i));
			}
		}
		return hiddenCols;
	}
}