/* File generated by: simse.codegenerator.guigenerator.ActionPanelGenerator */
package simse.gui;

import simse.state.*;
import simse.logic.*;
import simse.adts.objects.*;
import simse.adts.actions.*;

import java.text.*;
import java.util.*;

import javafx.event.ActionEvent;
import javafx.event.EventHandler;
import javafx.geometry.Pos;
import javafx.scene.Node;
import javafx.scene.control.ContextMenu;
import javafx.scene.control.Label;
import javafx.scene.control.MenuItem;
import javafx.scene.control.ScrollPane;
import javafx.scene.image.ImageView;
import javafx.scene.input.MouseEvent;
import javafx.scene.layout.Border;
import javafx.scene.layout.BorderPane;
import javafx.scene.layout.BorderStroke;
import javafx.scene.layout.BorderStrokeStyle;
import javafx.scene.layout.BorderWidths;
import javafx.scene.layout.CornerRadii;
import javafx.scene.layout.GridPane;
import javafx.scene.layout.Pane;
import javafx.scene.layout.VBox;
import javafx.scene.paint.Color;
import javafx.scene.text.Font;
import javafx.scene.text.TextAlignment;

public class ActionPanel extends Pane implements EventHandler<MouseEvent> {
	private State state;
	private Logic logic;
	private SimSEGUI mainGUIFrame;

	private JPopupMenu popup;

	private Employee selectedEmp;

	private ScrollPane actionPane;
	private Hashtable<Employee, VBox> empsToEmpPanels;
	private Hashtable<Employee, VBox> empsToPicPanels;
	// private Hashtable empsToActPanels;
	private Hashtable<Employee, JLabel> empsToPicLabels;
	private Hashtable<Employee, JLabel> empsToKeyLabels;

	public ActionPanel(SimSEGUI gui, State s, Logic l) {
		state = s;
		logic = l;
		mainGUIFrame = gui;

		setLayout(new BoxLayout(this, BoxLayout.Y_AXIS));

		actionPane = new ScrollPane();
		actionPane.setPrefSize(225, 425);
		actionPane.setStyle("-fx-background: rgb(102, 102, 102, 1);\n -fx-background-color: rgb(102, 102, 102, 1)");

		empsToEmpPanels = new Hashtable<Employee, VBox>();
		empsToPicPanels = new Hashtable<Employee, VBox>();
		// empsToActPanels = new Hashtable();
		empsToPicLabels = new Hashtable<Employee, JLabel>();
		empsToKeyLabels = new Hashtable<Employee, JLabel>();

		JPanel titlePanel = new JPanel(new BorderLayout());
		titlePanel.setBorder(BorderFactory.createEmptyBorder(0, 5, 0, 0));
		titlePanel.setBackground(new Color(102, 102, 102, 255));
		JLabel titleLabel = new JLabel("Current Activities:");
		Font f = titleLabel.getFont();
		Font newFont = new Font(f.getName(), f.getStyle(), 15);
		titleLabel.setFont(newFont);
		titleLabel.setForeground(Color.WHITE);
		titlePanel.add(titleLabel, BorderLayout.WEST);

		selectedEmp = null;
		popup = new JPopupMenu();

		update();

		add(titlePanel);
		add(actionPane);
		repaint();
	}

	public void createPopupMenu(Node node, double x, double y) {
		popup.getItems().clear();

		if (mainGUIFrame.getEngine().isRunning()) {
			return;
		}

		if (selectedEmp != null) {
			Vector<String> menuItems = selectedEmp.getMenu();
			for (int i = 0; i < menuItems.size(); i++) {
				String item = menuItems.elementAt(i);
				JMenuItem tempItem = new JMenuItem(item);
				tempItem.addActionListener(this);
				popup.add(tempItem);
			}
			if (menuItems.size() >= 1) {
				popup.show(c, x, y);
			}
		}
	}

	public void paintComponent(Graphics g) {
	}

	public void update() {
		actionPane.setContent(null);
		VBox employees = new VBox();
		Vector<Employee> allEmps = state.getEmployeeStateRepository().getAll();
		for (int i = 0; i < allEmps.size(); i++) {
			Employee emp = allEmps.elementAt(i);
			if (empsToEmpPanels.get(emp) == null) {
				VBox tempPanel = new VBox();
				tempPanel.addEventHandler(MouseEvent.ANY, this);
				empsToEmpPanels.put(emp, tempPanel);
			}
			if (empsToPicPanels.get(emp) == null) {
				JPanel tempPanel = new JPanel();
				tempPanel.addMouseListener(this);
				empsToPicPanels.put(emp, tempPanel);
			}
			/*
			 * if(empsToActPanels.get(emp) == null) { JPanel temp = new
			 * JPanel(); temp.setLayout(new BoxLayout(temp, BoxLayout.Y_AXIS));
			 * temp.setMinimumSize(new Dimension(150, 10));
			 * empsToActPanels.put(emp, temp); }
			 */
			VBox empPanel = empsToEmpPanels.get(emp);
			empPanel.getChildren().removeAll();
			VBox picPanel = (VBox) empsToPicPanels.get(emp);
			picPanel.getChildren().removeAll();

			GridPane gpLayout = new GridPane();
//			GridBagConstraints gbc = new GridBagConstraints();
//			gpLayout.fill = GridBagConstraints.NONE;
//			gpLayout.gridwidth = 3;
//			gpLayout.gridheight = 1;
			gpLayout.getChildren().add(empPanel);

			empPanel.setBackground(JavaFXHelpers.createBackgroundColor(Color.rgb(102, 102, 102, 1)));
			picPanel.setBackground(JavaFXHelpers.createBackgroundColor(Color.rgb(102, 102, 102, 1)));
			if (empsToPicLabels.get(emp) == null) {
				ImageIcon ico = new ImageIcon(
						ImageLoader.getImageFromURL(TabPanel.getImage(emp)));
				Image scaledImage = ico.getImage().getScaledInstance(35, 35,
						Image.SCALE_AREA_AVERAGING);
				ico.setImage(scaledImage);
				JLabel temp = new JLabel(ico);
				temp.addMouseListener(this);
				empsToPicLabels.put(emp, temp);
			}

			JLabel picLabel = empsToPicLabels.get(emp);
			picLabel.setHorizontalAlignment(SwingConstants.LEFT);
			picPanel.add(picLabel);
			if (emp instanceof SoftwareEngineer) {
				SoftwareEngineer e = (SoftwareEngineer) emp;
				if (empsToKeyLabels.get(e) == null) {
					Label temp = new Label("" + e.getName());
					temp.setTextFill(Color.WHITE);
					temp.setAlignment(Pos.BASELINE_LEFT);
					temp.setTextAlignment(TextAlignment.LEFT);
					System.out.println("Adding " + temp.getText());
					empsToKeyLabels.put(e, temp);
				}
				JLabel keyLabel = empsToKeyLabels.get(e);
				picPanel.add(keyLabel);
			}
			picPanel.setBorder(BorderFactory.createEmptyBorder(4, 4, 4, 4));
			gbc.weightx = 1;
			gbc.weighty = 1;
			gbc.anchor = GridBagConstraints.WEST;
			empPanel.add(picPanel);

			JPanel actsPanel = new JPanel();
			// actsPanel.removeAll();

			actsPanel.setBackground(JavaFXHelpers.createBackgroundColor(Color.rgb(102, 102, 102, 1)));
			empPanel.setBorder(new Border(new BorderStroke(Color.rgb(102, 102, 102, 1), BorderStrokeStyle.SOLID, CornerRadii.EMPTY, BorderWidths.FULL)));
			Vector<simse.adts.actions.Action> acts = state.getActionStateRepository().getAllActions(emp);
			for (int j = 0; j < acts.size(); j++) {
				simse.adts.actions.Action tempAct = acts.elementAt(j);
				if (tempAct instanceof CreateRequirementsAction) {
					JLabel tempLabel = new JLabel("Creating requirements");
					tempLabel.setFont(new Font(tempLabel.getFont().getName(),
							tempLabel.getFont().getStyle(), 10));
					tempLabel.setForeground(Color.WHITE);
					actsPanel.add(tempLabel);
				} else if (tempAct instanceof ReviewRequirementsAction) {
					JLabel tempLabel = new JLabel("Reviewing requirements");
					tempLabel.setFont(new Font(tempLabel.getFont().getName(),
							tempLabel.getFont().getStyle(), 10));
					tempLabel.setForeground(Color.WHITE);
					actsPanel.add(tempLabel);
				} else if (tempAct instanceof CorrectRequirementsAction) {
					JLabel tempLabel = new JLabel("Correcting requirements");
					tempLabel.setFont(new Font(tempLabel.getFont().getName(),
							tempLabel.getFont().getStyle(), 10));
					tempLabel.setForeground(Color.WHITE);
					actsPanel.add(tempLabel);
				} else if (tempAct instanceof CreateDesignAction) {
					JLabel tempLabel = new JLabel("Creating design");
					tempLabel.setFont(new Font(tempLabel.getFont().getName(),
							tempLabel.getFont().getStyle(), 10));
					tempLabel.setForeground(Color.WHITE);
					actsPanel.add(tempLabel);
				} else if (tempAct instanceof ReviewDesignAction) {
					JLabel tempLabel = new JLabel("Reviewing design");
					tempLabel.setFont(new Font(tempLabel.getFont().getName(),
							tempLabel.getFont().getStyle(), 10));
					tempLabel.setForeground(Color.WHITE);
					actsPanel.add(tempLabel);
				} else if (tempAct instanceof CorrectDesignAction) {
					JLabel tempLabel = new JLabel("Correcting design");
					tempLabel.setFont(new Font(tempLabel.getFont().getName(),
							tempLabel.getFont().getStyle(), 10));
					tempLabel.setForeground(Color.WHITE);
					actsPanel.add(tempLabel);
				} else if (tempAct instanceof CreateCodeAction) {
					JLabel tempLabel = new JLabel("Creating code");
					tempLabel.setFont(new Font(tempLabel.getFont().getName(),
							tempLabel.getFont().getStyle(), 10));
					tempLabel.setForeground(Color.WHITE);
					actsPanel.add(tempLabel);
				} else if (tempAct instanceof InspectCodeAction) {
					JLabel tempLabel = new JLabel("Inspecting code");
					tempLabel.setFont(new Font(tempLabel.getFont().getName(),
							tempLabel.getFont().getStyle(), 10));
					tempLabel.setForeground(Color.WHITE);
					actsPanel.add(tempLabel);
				} else if (tempAct instanceof CorrectCodeAction) {
					JLabel tempLabel = new JLabel("Correcting code");
					tempLabel.setFont(new Font(tempLabel.getFont().getName(),
							tempLabel.getFont().getStyle(), 10));
					tempLabel.setForeground(Color.WHITE);
					actsPanel.add(tempLabel);
				} else if (tempAct instanceof IntegrateCodeAction) {
					JLabel tempLabel = new JLabel("Integrating code");
					tempLabel.setFont(new Font(tempLabel.getFont().getName(),
							tempLabel.getFont().getStyle(), 10));
					tempLabel.setForeground(Color.WHITE);
					actsPanel.add(tempLabel);
				} else if (tempAct instanceof SystemTestAction) {
					JLabel tempLabel = new JLabel("Doing system test");
					tempLabel.setFont(new Font(tempLabel.getFont().getName(),
							tempLabel.getFont().getStyle(), 10));
					tempLabel.setForeground(Color.WHITE);
					actsPanel.add(tempLabel);
				} else if (tempAct instanceof CreateSystemTestPlanAction) {
					JLabel tempLabel = new JLabel("Creating system test plan");
					tempLabel.setFont(new Font(tempLabel.getFont().getName(),
							tempLabel.getFont().getStyle(), 10));
					tempLabel.setForeground(Color.WHITE);
					actsPanel.add(tempLabel);
				} else if (tempAct instanceof ReviewSystemTestPlanAction) {
					JLabel tempLabel = new JLabel("Reviewing system test plan");
					tempLabel.setFont(new Font(tempLabel.getFont().getName(),
							tempLabel.getFont().getStyle(), 10));
					tempLabel.setForeground(Color.WHITE);
					actsPanel.add(tempLabel);
				} else if (tempAct instanceof CorrectSystemTestPlanAction) {
					JLabel tempLabel = new JLabel("Correcting system test plan");
					tempLabel.setFont(new Font(tempLabel.getFont().getName(),
							tempLabel.getFont().getStyle(), 10));
					tempLabel.setForeground(Color.WHITE);
					actsPanel.add(tempLabel);
				} else if (tempAct instanceof BreakAction) {
					JLabel tempLabel = new JLabel("On a break");
					tempLabel.setFont(new Font(tempLabel.getFont().getName(),
							tempLabel.getFont().getStyle(), 10));
					tempLabel.setForeground(Color.WHITE);
					actsPanel.add(tempLabel);
				} else if (tempAct instanceof GetSickAction) {
					JLabel tempLabel = new JLabel("Out sick");
					tempLabel.setFont(new Font(tempLabel.getFont().getName(),
							tempLabel.getFont().getStyle(), 10));
					tempLabel.setForeground(Color.WHITE);
					actsPanel.add(tempLabel);
				}
			}
//			gbc.weightx = 2;
//			gbc.anchor = GridBagConstraints.EAST;
			actsPanel.setPrefSize(150, (int) (actsPanel.getPrefHeight()));
			empPanel.getChildren().add(actsPanel);
//			empPanel.setBorder(BorderFactory.createLineBorder(Color.BLACK));
			employees.getChildren().add(empPanel);
		}
		actionPane.setContent(employees);
	}	

	public void mouseClicked(MouseEvent me) {
	}

	public void mousePressed(MouseEvent me) {
	}

	public void mouseEntered(MouseEvent me) {
	}

	public void mouseExited(MouseEvent me) {
	}

	public void mouseReleased(MouseEvent me) {
		if (me.getComponent() instanceof JLabel) {
			JLabel label = (JLabel) me.getComponent();
			Employee emp = getEmpFromPicLabel(label);
			if (emp != null) {
				if (me.getButton() == MouseEvent.BUTTON1) // left button clicked
				{
					mainGUIFrame.getTabPanel().setGUIChanged();
					mainGUIFrame.getTabPanel().setObjectInFocus(emp);
					mainGUIFrame.getAttributePanel().setGUIChanged();
					mainGUIFrame.getAttributePanel().setObjectInFocus(
							emp,
							new ImageIcon(ImageLoader.getImageFromURL(TabPanel
									.getImage(emp))));
				} else if (me.isPopupTrigger()
						&& (state.getClock().isStopped() == false)) // right-click
				{
					selectedEmp = emp;
					createPopupMenu(label, me.getX(), me.getY());
					repaint();
				}
			}
		} else if (me.getComponent() instanceof JPanel) {
			JPanel panel = (JPanel) me.getComponent();
			Employee emp = getEmpFromPanel(panel);
			if (emp != null) {
				if (me.getButton() == MouseEvent.BUTTON1) // left button clicked
				{
					mainGUIFrame.getTabPanel().setGUIChanged();
					mainGUIFrame.getTabPanel().setObjectInFocus(emp);
					mainGUIFrame.getAttributePanel().setGUIChanged();
					mainGUIFrame.getAttributePanel().setObjectInFocus(
							emp,
							new ImageIcon(ImageLoader.getImageFromURL(TabPanel
									.getImage(emp))));
				} else if (me.isPopupTrigger()
						&& (state.getClock().isStopped() == false)) // right-click
				{
					selectedEmp = emp;
					createPopupMenu(panel, me.getX(), me.getY());
					repaint();
				}
			}
		}
	}

	public void popupMenuActions(JMenuItem source) {
		JMenuItem item = (JMenuItem) source;
		logic.getMenuInputManager().menuItemSelected(selectedEmp,
				item.getText(), mainGUIFrame);
		mainGUIFrame.getWorld().update();
	}

	public void actionPerformed(ActionEvent e) // dealing with actions generated
												// by popup menus
	{
		Object source = e.getSource();
		if (source instanceof JMenuItem) {
			popupMenuActions((JMenuItem) source);
		}
	}

	private Employee getEmpFromPicLabel(JLabel label) {
		for (Enumeration<Employee> keys = empsToPicLabels.keys(); keys
				.hasMoreElements();) {
			Employee keyEmp = keys.nextElement();
			if (empsToPicLabels.get(keyEmp) == label) {
				return keyEmp;
			}
		}
		return null;
	}

	private Employee getEmpFromPanel(JPanel panel) {
		for (Enumeration<Employee> keys = empsToEmpPanels.keys(); keys
				.hasMoreElements();) {
			Employee keyEmp = keys.nextElement();
			if (empsToEmpPanels.get(keyEmp) == panel) {
				return keyEmp;
			}
		}
		for (Enumeration<Employee> keys = empsToPicPanels.keys(); keys
				.hasMoreElements();) {
			Employee keyEmp = keys.nextElement();
			if (empsToPicPanels.get(keyEmp) == panel) {
				return keyEmp;
			}
		}
		return null;
	}
  
	@Override
	public void handle(MouseEvent event) {
		if (event.getEventType() == MouseEvent.MOUSE_RELEASED) {
			if (event.getSource() instanceof Label) {
				Label label = (Label) event.getSource();
				Employee emp = getEmpFromPicLabel(label);
				if (emp != null) {
					if (event.isPrimaryButtonDown()) // left button clicked
					{
						mainGUIFrame.getTabPanel().setGUIChanged();
						mainGUIFrame.getTabPanel().setObjectInFocus(emp);
						mainGUIFrame.getAttributePanel().setGUIChanged();
						mainGUIFrame.getAttributePanel().setObjectInFocus(emp, JavaFXHelpers.createImage(TabPanel.getImage(emp)));
					} else if (event.isPopupTrigger() && (state.getClock().isStopped() == false)) // right-click
					{
						selectedEmp = emp;
						createPopupMenu(label, event.getSceneX(), event.getSceneY());
					}
				}
			} else if (event.getSource() instanceof Pane) {
				Pane pane = (Pane) event.getSource();
				Employee emp = getEmpFromPanel(pane);
				if (emp != null) {
					if (event.isPrimaryButtonDown()) // left button clicked
					{
						mainGUIFrame.getTabPanel().setGUIChanged();
						mainGUIFrame.getTabPanel().setObjectInFocus(emp);
						mainGUIFrame.getAttributePanel().setGUIChanged();
						mainGUIFrame.getAttributePanel().setObjectInFocus(emp,JavaFXHelpers.createImage(TabPanel.getImage(emp)));
					} else if (event.isPopupTrigger() && (state.getClock().isStopped() == false)) // right-click
					{
						selectedEmp = emp;
						createPopupMenu(pane, event.getSceneX(), event.getSceneY());
					}
				}
			}
		}
	}
}